[
    {
        "id": "c1a8b9f7.1d2e3f",
        "type": "subflow",
        "name": "Send Notification",
        "info": "Subflow to handle sending notifications via Email.",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "13d6c2b7c8c202f1"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c1465768540b83e1",
        "type": "http request",
        "z": "c1a8b9f7.1d2e3f",
        "name": "Get Notification Settings",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/api/notification-settings",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "x": 470,
        "y": 80,
        "wires": [
            [
                "e28cfda9df19f4d1",
                "86faa1fe4545401e"
            ]
        ]
    },
    {
        "id": "e28cfda9df19f4d1",
        "type": "change",
        "z": "c1a8b9f7.1d2e3f",
        "name": "‡∏¢‡πâ‡∏≤‡∏¢ settings + ‡∏Ñ‡∏∑‡∏ô payload = alert",
        "rules": [
            {
                "t": "set",
                "p": "settings",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "alert",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 80,
        "wires": [
            [
                "b341f478991fb3a4"
            ]
        ]
    },
    {
        "id": "b341f478991fb3a4",
        "type": "function",
        "z": "c1a8b9f7.1d2e3f",
        "name": "Prepare Email (robust)",
        "func": "// Prepare Email v5.3 - Smarter Subject Lines\nconst settings = msg.settings || {};\nconst alert = msg.alert || msg.payload || {};\n\nconst rcp = settings.recipients || {};\nconst raw = Array.isArray(rcp.email) ? rcp.email : (typeof rcp.email === 'string' ? rcp.email.split(',') : []);\nconst toList = raw.map(s => String(s).trim()).filter(Boolean);\n\nif (toList.length === 0) {\n    node.status({ fill: 'yellow', shape: 'ring', text: 'No email recipients' });\n    return null;\n}\n\nconst thaiTime = ts => (ts ? new Date(ts) : new Date()).toLocaleString('th-TH', {\n    day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit',\n    hour12: false, timeZone: 'Asia/Bangkok'\n});\n\nconst pick = (o, ...k) => { for (const x of k) if (o && o[x] !== undefined && o[x] !== null && o[x] !== '') return o[x]; return null; };\nconst toNum = v => { if (v === null || v === undefined) return null; const m = String(v).match(/-?\\d+(\\.\\d+)?/); return m ? Number(m[0]) : null; };\n\nfunction metricInfo(metric) {\n    const k = String(metric || '').toLowerCase();\n    if (k.startsWith('temp')) return { th: '‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥', unit: '¬∞C', digits: 1, icon: 'üå°Ô∏è' };\n    if (k.startsWith('hum')) return { th: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô', unit: '%', digits: 1, icon: 'üíß' };\n    if (k.startsWith('connect')) return { th: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö', unit: '', digits: 0, icon: 'üì°' };\n    if (k.startsWith('sensor_connect')) return { th: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå', unit: '', digits: 0, icon: 'üîå' };\n    return { th: '‡∏Ñ‡πà‡∏≤‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå', unit: '', digits: 2, icon: 'üìä' };\n}\n\nconst room = pick(alert, 'room_name', 'room') || 'N/A';\nconst pos = pick(alert, 'sensor_name', 'sensor') || 'N/A';\nconst tsTH = thaiTime(pick(alert, 'ts', 'timestamp', 'opened_at'));\nconst mac = String(pick(alert, 'mac', 'device_mac') || '').toUpperCase();\nconst metricKey = String(pick(alert, 'metric', 'type') || '').toLowerCase();\nconst mi = metricInfo(metricKey);\n\nconst typeOrState = String(pick(alert, 'event', 'type', 'state') || '').toLowerCase();\nconst isRecovery = ['recovery', 'normal', 'resolve', 'resolved', 'close', 'closed'].includes(typeOrState);\n\nlet valNum = null;\nif (isRecovery) {\n    valNum = toNum(pick(alert, 'value', 'recovery_value', 'close_value', 'value_at_close', 'current_value', 'last_value'));\n} else {\n    valNum = toNum(pick(alert, 'value', 'trigger_value', 'current_value', 'last_value'));\n}\n\nlet warnMin = toNum(pick(alert, 'warn_min'));\nlet warnMax = toNum(pick(alert, 'warn_max'));\nlet critMin = toNum(pick(alert, 'crit_min'));\nlet critMax = toNum(pick(alert, 'crit_max'));\n\nif ([warnMin, warnMax, critMin, critMax].some(v => v === null) && metricKey) {\n    const rules = global.get('effectiveRuleMap') || {};\n    const rule = rules[`${mac}|${pos}|${metricKey}`] || rules[`${mac}|overall|${metricKey}`] || rules[`system_${metricKey}`];\n    if (rule) {\n        if (warnMin === null) warnMin = toNum(rule.warn_min);\n        if (warnMax === null) warnMax = toNum(rule.warn_max);\n        if (critMin === null) critMin = toNum(rule.crit_min);\n        if (critMax === null) critMax = toNum(rule.crit_max);\n    }\n}\n\nlet level = String(pick(alert, 'level', 'severity') || 'info').toLowerCase();\nlet sevLabel;\nif (isRecovery) { sevLabel = '‚úÖ Recovery'; level = 'recovery'; }\nelse if (level === 'critical') sevLabel = 'üö® Critical';\nelse if (level === 'warning') sevLabel = '‚ö†Ô∏è Warning';\nelse sevLabel = '‚ÑπÔ∏è ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö';\n\nlet statusWord = '‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥';\nif (metricKey === 'connectivity' || metricKey === 'sensor_connectivity') {\n    statusWord = (valNum === 0) ? '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå' : '‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå';\n} else if (valNum !== null) {\n    if (critMax !== null && valNum > critMax) statusWord = '‡∏™‡∏π‡∏á‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ß‡∏¥‡∏Å‡∏§‡∏ï';\n    else if (critMin !== null && valNum < critMin) statusWord = '‡∏ï‡πà‡∏≥‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ß‡∏¥‡∏Å‡∏§‡∏ï';\n    else if (warnMax !== null && valNum > warnMax) statusWord = '‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á';\n    else if (warnMin !== null && valNum < warnMin) statusWord = '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á';\n    else statusWord = '‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥';\n}\n\n// --- ‚ú® FIX START: ‡∏™‡∏£‡πâ‡∏≤‡∏á Subject ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚ú® ---\nlet subject;\nif (metricKey === 'connectivity') {\n    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ \"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á\"\n    subject = `[${sevLabel}] ${mi.th} ${room} ${statusWord}`;\n} else {\n    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: ‡∏°‡∏µ \"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á\" ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°\n    subject = isRecovery\n        ? `[${sevLabel}] ${mi.th}‡∏ó‡∏µ‡πà${room} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ${pos} ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥`\n        : `[${sevLabel}] ${mi.th}‡∏ó‡∏µ‡πà${room} ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ${pos} ${statusWord}`;\n}\n// --- ‚ú® FIX END ‚ú® ---\n\nconst valTxt = (valNum === null) ? '-' : `${valNum.toFixed(mi.digits)}${mi.unit}`;\n\nlet body = `üìÖ ‡πÄ‡∏ß‡∏•‡∏≤: ${tsTH}\nüìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${room}\n`;\n\nif (metricKey === 'connectivity') {\n    body += `${mi.icon} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${statusWord.toUpperCase()}\\n`;\n} else if (metricKey === 'sensor_connectivity') {\n    body += `üéØ ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå: ${pos}\\n`;\n    body += `${mi.icon} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${statusWord.toUpperCase()}\\n`;\n} else {\n    body += `üéØ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${pos}\\n`;\n    body += `${mi.icon} ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${valTxt}\\n`;\n    if (level === 'critical') {\n        const rangeTxt = (critMin !== null && critMax !== null) ? `${critMin.toFixed(mi.digits)}-${critMax.toFixed(mi.digits)}${mi.unit}` : '-';\n        body += `‚úÖ ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: ${rangeTxt}\\n`;\n    } else if (level === 'warning') {\n        const warnRangeTxt = (warnMin !== null && warnMax !== null) ? `${warnMin.toFixed(mi.digits)}-${warnMax.toFixed(mi.digits)}${mi.unit}` : '-';\n        body += `‚úÖ ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: ${warnRangeTxt}\\n`;\n    } else if (isRecovery) {\n        const warnRangeTxt = (warnMin !== null && warnMax !== null) ? `${warnMin.toFixed(mi.digits)}-${warnMax.toFixed(mi.digits)}${mi.unit}` : '-';\n        body += `‚úÖ ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: ${warnRangeTxt}\\n`;\n    }\n}\n\nbody += `\\n`;\n\nmsg.to = toList.join(',');\nmsg.topic = subject;\nmsg.payload = body;\n\ndelete msg.html;\ndelete msg.headers;\ndelete msg.attachments;\n\nnode.status({ fill: 'green', shape: 'dot', text: `Text Email to:${toList.length}` });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            [
                "77597513641dbe6d",
                "e010f785574d2e87"
            ]
        ]
    },
    {
        "id": "77597513641dbe6d",
        "type": "e-mail",
        "z": "c1a8b9f7.1d2e3f",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "",
        "dname": "Send Email via Gmail",
        "x": 1220,
        "y": 40,
        "wires": []
    },
    {
        "id": "e010f785574d2e87",
        "type": "debug",
        "z": "c1a8b9f7.1d2e3f",
        "name": "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á (to/topic/payload)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "to",
        "statusType": "msg",
        "x": 1260,
        "y": 120,
        "wires": []
    },
    {
        "id": "86faa1fe4545401e",
        "type": "debug",
        "z": "c1a8b9f7.1d2e3f",
        "name": "‡∏î‡∏π settings ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 710,
        "y": 180,
        "wires": []
    },
    {
        "id": "13d6c2b7c8c202f1",
        "type": "change",
        "z": "c1a8b9f7.1d2e3f",
        "name": "‡∏™‡∏≥‡∏£‡∏≠‡∏á alert ‚Üí msg.alert",
        "rules": [
            {
                "t": "set",
                "p": "alert",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "c1465768540b83e1"
            ]
        ]
    },
    {
        "id": "640c6734fdac3595",
        "type": "tab",
        "label": "Server Monitoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b43a3178c92d9fc0",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true,
            "color": "#ffffff",
            "stroke": "#ff0000"
        },
        "nodes": [
            "e06d098d363668d7",
            "bd8648c95c201831",
            "8ff2cf1555f60ca7",
            "d24eecc773475a0d",
            "818d1ba0600fd4e4",
            "3f977e562c7cfa30"
        ],
        "x": 1654,
        "y": 379,
        "w": 792,
        "h": 122
    },
    {
        "id": "ba826875d50440fd",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff3f3f",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#ffffff"
        },
        "nodes": [
            "35aacf4f49fc2fe5",
            "a2f165344059f626",
            "9cd0de312f0aaebf",
            "d266684b84baf6ee",
            "128af736ebd4f5cb",
            "8a4df22f9b7c306e",
            "149454b95ccb8189",
            "099150f81e18ae84",
            "54ea2bf1620764ea",
            "7d3c211e7f5ac418",
            "b715c447fd1d3326"
        ],
        "x": 74,
        "y": 159,
        "w": 832,
        "h": 242
    },
    {
        "id": "7bdaf4cb89927b60",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "01ffc9feb42a01f7",
            "0f3483727858d393",
            "1311921afd8b6feb",
            "10047dbe449cb4b0",
            "431c288dc98a3155",
            "a5e565e3042098e8",
            "b24553a04b159354",
            "320af7eb35ac1c83"
        ],
        "x": 74,
        "y": 419,
        "w": 792,
        "h": 242
    },
    {
        "id": "bf24f1109e557024",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "8527f967384360ec",
            "59e009aee079776e",
            "62788c726b663f0d",
            "2d7312052d110181",
            "4de2c1d8785509fe"
        ],
        "x": 934,
        "y": 159,
        "w": 412,
        "h": 182
    },
    {
        "id": "04363f3d44ea50b0",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "c46318095bd096a9",
            "874c0c450dd51575",
            "6636d93cad979dc5"
        ],
        "x": 1394,
        "y": 159,
        "w": 232,
        "h": 182
    },
    {
        "id": "d314b1ded220aada",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "5848de06518173ba",
            "61401c21d911973d",
            "2467960b4d1de17c",
            "f0c3bb733466c3cc",
            "84de7bd1374c55ed",
            "ec4ba7c4df1cd904"
        ],
        "x": 1654,
        "y": 139,
        "w": 572,
        "h": 222
    },
    {
        "id": "05736f525f0739c2",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "59b511670d45ce09",
            "945c7a052f56ca79",
            "4efc7f7d6266942a",
            "a1a2222d90a0dc17",
            "d487db29e6d6f598",
            "7b38579d583a6efe",
            "1ddb9f9c6361ecbd",
            "d736f2dfb44cb98c"
        ],
        "x": 1654,
        "y": 519,
        "w": 742,
        "h": 162
    },
    {
        "id": "63f59a4d8f7d47e7",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "e7b602f8cdebf2d0",
            "9353c7268406244b",
            "6d0dbf7cb49c607c",
            "4a3a5a1e6c60f650",
            "18017e07326c690f",
            "2fd31bb845f90d86",
            "ed784a8e66a138cd"
        ],
        "x": 1654,
        "y": 699,
        "w": 732,
        "h": 162
    },
    {
        "id": "0e0a16b3eb3063ee",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "cef603b7eddadbd1",
            "f365bff0639c4d0f",
            "882559e213bde260",
            "04e1039fc59320a4",
            "200d49b6f215cbff"
        ],
        "x": 1654,
        "y": 1099,
        "w": 612,
        "h": 122
    },
    {
        "id": "b4a00978e789863d",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "0482f31f984f74b9",
            "58589672a110f473",
            "eccd6e3261b7615b",
            "6022786dd2200fa7",
            "b28ee7c1ebe01f7f",
            "91754b0ad2692269"
        ],
        "x": 2294,
        "y": 1099,
        "w": 932,
        "h": 122
    },
    {
        "id": "3405bc2648d0e0c4",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "Sync Alerts from Device to DB",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "d83d445d62969ded",
            "4ecc2247b3a33d89",
            "53bee7f5fd9eed25",
            "9f003438c0f5cb62",
            "57b8ad027dff3e5a",
            "8175b4f18a6f99c6",
            "898e844961b8cd39",
            "815b587ab45df4c7",
            "cfbe7be2bb75dc23",
            "c864607514d350c4",
            "bdb285d12433aad8",
            "d54032355d69570c",
            "472eab2a072d1c93",
            "c96aa8cdedc6c4b8",
            "7c18457b582e4c85",
            "a7e285e70ff817c1",
            "f11085f09044723f",
            "271033183b121bd0",
            "ae3aa6d1a10c043e",
            "636d2940b0ca4e78",
            "cacb1e585749c38b",
            "6c05f5d1fd3fc7c0",
            "d1b0a1c3da91e3c6"
        ],
        "x": 2548,
        "y": 439,
        "w": 1238,
        "h": 508
    },
    {
        "id": "c7e3510948f6624e",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "8ad81ad080bd81df",
            "bab874a3ec5e3d7f",
            "40dc39f6a661c710",
            "f8fa173138913533",
            "5d76859d4b52e850",
            "edb9aefa4d5efde1",
            "6889d15e433846c7",
            "e83de35d3a2f5a12",
            "4557dd1bb41b4158",
            "2a78b5cd6ba1b8d3"
        ],
        "x": 74,
        "y": 679,
        "w": 912,
        "h": 242
    },
    {
        "id": "be536ff9b21472e1",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "785762e88fcf5492",
            "c4ec9302faebc92a",
            "72c7559d7d6aba22",
            "289352e7c0c2f154",
            "b47e7018602a98b6",
            "2c5e9398eb0b6e17",
            "5ca3f959e50a896b",
            "0de9e2b71b06a40a",
            "a3fd0dbfc2793eb9",
            "95fa60aa68b20120"
        ],
        "x": 74,
        "y": 1139,
        "w": 812,
        "h": 242
    },
    {
        "id": "bc3f5b7e2b5083ca",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "002f7097bc63220c",
            "229b4521996cbe60",
            "526a0f4d7c13dbfa",
            "c9fa0b4b9bb161cd",
            "882fad44105f6afc",
            "0ca34c7a39856c53"
        ],
        "x": 74,
        "y": 939,
        "w": 772,
        "h": 182
    },
    {
        "id": "c7e46bccde3fcec3",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "b699f43fb31872ac",
            "d70cf71d9d4a7b90",
            "536682416efd33c1",
            "d160a84f3489e2ec"
        ],
        "x": 74,
        "y": 1399,
        "w": 632,
        "h": 122
    },
    {
        "id": "902e9a6537069b8d",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "02d0431db93e1519",
            "ec7212763482d9e7",
            "d0bf4edd88a42aed",
            "154ee51f956aec0e",
            "6f0a780603bc593e",
            "0bdff17fceb940bf"
        ],
        "x": 74,
        "y": 1539,
        "w": 912,
        "h": 122
    },
    {
        "id": "37e675817144b486",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "Export Report API (/api/export) v13 - Final Fix",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false,
            "border": true
        },
        "nodes": [
            "de5e6ed809646311",
            "82779c738ad44c4b",
            "258f6bf27fc6e1cf",
            "417fa61902dccc67",
            "dc55c89f0ab0fef9",
            "f3110649b75fa1f6",
            "3e79a8b6fddc2caf",
            "a7081151ab3a2ad4",
            "7f021b2b6bf737d9",
            "6e94b291e5b12d2d",
            "57fe4cea096dc9a9"
        ],
        "x": 2614,
        "y": 1239,
        "w": 1192,
        "h": 182
    },
    {
        "id": "48904a14f4cbefb3",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "31093562cb7659a0",
            "f253a7b1c4d4eb47",
            "297a1b865a994b0b",
            "3981f0f3d29a470c",
            "ee048f67cf4fa1d6",
            "b8274aa11208401e",
            "5d0f5e25fa5197c3",
            "6373aa23303841cf",
            "15d9dbfd0c8ce0cb",
            "2a5b63a94c933684",
            "734ded21c1daba8b",
            "33ca16f0ac839ca5"
        ],
        "x": 1654,
        "y": 879,
        "w": 872,
        "h": 202
    },
    {
        "id": "764e306119ec0e9d",
        "type": "group",
        "z": "640c6734fdac3595",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Daily Report",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": false
        },
        "nodes": [
            "e6ece526bf9c5d21",
            "eb744f586a753274",
            "745071770a1a0681",
            "3733a98c8c4bb892",
            "2856459866b453a6",
            "980e30697c2aab77",
            "b86f5c06d6692e5c",
            "c7f125caa48b240c",
            "96f558ac37e73c8c",
            "e43561653a2a4834",
            "246c8e40ce7babbb"
        ],
        "x": 1654,
        "y": 1239,
        "w": 942,
        "h": 202
    },
    {
        "id": "f11085f09044723f",
        "type": "group",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "",
        "style": {
            "stroke": "#ff0000",
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "e24642fbead82f06",
            "36c585400f83a862",
            "5c3e1788c6456b95",
            "e1ce3e2fa4bb4a4e",
            "e23cd9a179d4070e"
        ],
        "x": 2574,
        "y": 739,
        "w": 452,
        "h": 182
    },
    {
        "id": "e06d098d363668d7",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "GET /api/time",
        "url": "/api/time",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1750,
        "y": 460,
        "wires": [
            [
                "bd8648c95c201831"
            ]
        ]
    },
    {
        "id": "bd8648c95c201831",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "Sync Time",
        "func": "msg.payload = { iso: new Date().toISOString() };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 460,
        "wires": [
            [
                "8ff2cf1555f60ca7",
                "818d1ba0600fd4e4"
            ]
        ]
    },
    {
        "id": "8ff2cf1555f60ca7",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "Response",
        "statusCode": "",
        "headers": {},
        "x": 2100,
        "y": 460,
        "wires": []
    },
    {
        "id": "35aacf4f49fc2fe5",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Temperature and Humidity",
        "topic": "esp32/+/dht",
        "qos": "2",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "a2f165344059f626",
                "128af736ebd4f5cb"
            ]
        ]
    },
    {
        "id": "a2f165344059f626",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Data",
        "func": "// Function node (Node-RED)\n// ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö: avg_temp, avg_hum, uptime_pct, timestamp, pin\n// ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà: temp_status ‡πÅ‡∏•‡∏∞ hum_status\n// ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á status, ‡πÑ‡∏°‡πà map MAC/room, ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ topic\n// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ mac/room_id ‡∏à‡∏∞ pass-through ‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö map ‡πÄ‡∏≠‡∏á\n\nif (!msg || typeof msg !== 'object') {\n    return null;\n}\nconst p = msg.payload || {};\n\n// ---------- helpers ----------\n/**\n * ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null\n * @param {*} v ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á\n * @returns {number|null}\n */\nfunction toNum(v) {\n    if (v === null || v === undefined) return null;\n    const n = Number(v);\n    return Number.isFinite(n) ? n : null;\n}\n\n/**\n * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å object ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ key ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î\n * @param {object} obj\n * @param {string[]} keys\n * @returns {*}\n */\nfunction pick(obj, keys) {\n    for (const k of keys) {\n        if (obj?.[k] !== undefined && obj[k] !== null) {\n            return obj[k];\n        }\n    }\n    return undefined;\n}\n\n/**\n * ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö MAC address ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô\n * @param {string} s\n * @returns {string|undefined}\n */\nfunction normMAC(s) {\n    const hex = String(s || '').toUpperCase().replace(/[^0-9A-F]/g, '');\n    return hex.length === 12 ? hex.match(/.{2}/g).join(':') : undefined;\n}\n\n/**\n * ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601\n * @param {string|number} ts\n * @returns {string}\n */\nfunction toISO(ts) {\n    if (!ts) return new Date().toISOString();\n    if (typeof ts === 'number') {\n        const ms = ts < 1e11 ? ts * 1000 : ts; // epoch_s -> ms\n        return new Date(ms).toISOString();\n    }\n    const d = new Date(ts);\n    return isNaN(d) ? new Date().toISOString() : d.toISOString();\n}\n\n// ---------- normalize values ----------\nconst avgTemp = toNum(pick(p, ['avg_temp', 'temp', 'temperature', 't']));\nconst avgHum = toNum(pick(p, ['avg_hum', 'humidity', 'hum', 'rh']));\nconst minTemp = toNum(pick(p, ['min_temp', 'min_temperature']));\nconst maxTemp = toNum(pick(p, ['max_temp', 'max_temperature']));\nconst minHum = toNum(pick(p, ['min_hum', 'min_humidity']));\nconst maxHum = toNum(pick(p, ['max_hum', 'max_humidity']));\nconst tempStatus = pick(p, ['temp_status']);\nconst humStatus = pick(p, ['hum_status']);\n\nlet uptime = toNum(pick(p, ['uptime_pct', 'uptime_percent', 'uptime', 'up']));\nif (uptime != null && uptime > 0 && uptime <= 1) {\n    uptime = uptime * 100; // 0..1 -> %\n}\n\nconst ts = pick(p, ['timestamp', 'time', 'ts', 'iso']);\n\nconst pin = pick(p, ['pin']);\n\n// ---------- build minimal output ----------\nconst out = {};\nif (avgTemp !== null) out.avg_temp = avgTemp;\nif (avgHum !== null) out.avg_hum = avgHum;\n\n// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ min/max temp/hum\nif (minTemp !== null) out.min_temp = minTemp;\nif (maxTemp !== null) out.max_temp = maxTemp;\nif (minHum !== null) out.min_hum = minHum;\nif (maxHum !== null) out.max_hum = maxHum;\n\n// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\nif (tempStatus !== undefined) out.temp_status = tempStatus;\nif (humStatus !== undefined) out.hum_status = humStatus;\n\nif (uptime !== null) out.uptime_pct = Math.max(0, Math.min(100, uptime));\n\nout.timestamp = toISO(ts);\n\n// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ pin\nif (pin !== undefined) out.pin = pin;\n\n// pass-through mac / room_id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏à‡∏∞‡πÑ‡∏õ map ‡πÄ‡∏≠‡∏á)\nconst mac = normMAC(pick(p, ['mac', 'device_mac', 'eth_mac', 'wifi_mac']));\nif (mac) out.mac = mac;\nif (typeof p.room_id === 'string') out.room_id = p.room_id.toLowerCase();\n\n// ---------- output ----------\nmsg.payload = out;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "9708f9c81584ae9a",
                "b715c447fd1d3326",
                "8a4df22f9b7c306e"
            ]
        ]
    },
    {
        "id": "9cd0de312f0aaebf",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Map mac to room",
        "func": "// Learn room ‚Üî mac (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô)\nlet p = msg.payload || {};\nlet room = String(p.room_id || '').toLowerCase();\n\nfunction normMAC(s) {\n    if (!s) return null;\n    s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n    if (s.length !== 12) return null;\n    return s.match(/.{2}/g).join(':');\n}\nlet mac = normMAC(p.mac);\nif (!room || !mac) return null;\n\nlet room2mac = flow.get('room2mac') || {};\nlet mac2room = flow.get('mac2room') || {};\nlet room_seen = flow.get('room_seen') || {};\n\n// 1) ‡∏ñ‡πâ‡∏≤ MAC ‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏¢‡∏π‡πà‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô ‚Üí ‡∏¢‡πâ‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô: ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤\nconst prevRoom = mac2room[mac];\nif (prevRoom && prevRoom !== room) {\n    delete room2mac[prevRoom];\n}\n\n// 2) ‡∏ñ‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ MAC ‡∏≠‡∏∑‡πà‡∏ô ‚Üí ‡πÉ‡∏´‡πâ MAC ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô\nconst prevMac = room2mac[room];\nif (prevMac && prevMac !== mac) {\n    delete mac2room[prevMac];\n}\n\n// 3) ‡∏ï‡∏±‡πâ‡∏á mapping ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö one-to-one\nroom2mac[room] = mac;\nmac2room[mac] = room;\nroom_seen[room] = Date.now();\n\nflow.set('room2mac', room2mac);\nflow.set('mac2room', mac2room);\nflow.set('room_seen', room_seen);\nnode.status({ fill: 'green', shape: 'dot', text: `${room} ‚Üî ${mac}` });\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "01ffc9feb42a01f7",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "name": "Check Ping and MQTT Then Send Status",
        "func": "let states = flow.get('deviceStates') || {};\nconst MQTT_TIMEOUT_MS = 21000;\n\nfunction now() { return Date.now(); }\n\nfunction normalizeMac(s) {\n    if (!s) return null;\n    s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n    if (s.length !== 12) return null;\n    return s.match(/.{2}/g).join(':');\n}\n\nconst ipMap = {\n    '192.168.42.30': '94:B9:7E:CE:01:EF'\n};\n\nlet mac = null;\nlet sourceType = null;\n\nif ((msg.topic || '').includes(\"status\")) {\n    sourceType = \"MQTT\";\n    mac = normalizeMac(msg.payload && msg.payload.mac);\n    if (!mac) {\n        const m = /^esp32\\/([^/]+)\\/status$/.exec(msg.topic || '');\n        if (m && m[1]) mac = normalizeMac(m[1]);\n    }\n} else {\n    sourceType = \"Ping\";\n    mac = normalizeMac(ipMap[msg.topic]);\n}\n\nif (!mac) return null;\n\nif (!states[mac]) {\n    states[mac] = {\n        pingOk: false,\n        mqttOk: false,\n        lastCombinedState: 'offline',\n        ping_ms: null,\n        lastMqttTs: 0\n    };\n}\n\nconst oldState = { ...states[mac] };\n\nif (sourceType === \"MQTT\") {\n    const st = (msg.payload && msg.payload.status || '').toString().toLowerCase();\n    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï mqttOk ‡∏ï‡∏≤‡∏° payload\n    states[mac].mqttOk = (st === 'online');\n    // ‡πÄ‡∏Å‡πá‡∏ö timestamp ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ MQTT ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞\n    states[mac].lastMqttTs = now();\n} else {\n    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Ping\n    states[mac].pingOk = (msg.payload !== false);\n    states[mac].ping_ms = (msg.payload !== false) ? Number(msg.payload) : oldState.ping_ms;\n}\n\n// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout ‡∏Ç‡∏≠‡∏á MQTT ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤\nif (states[mac].lastMqttTs === 0 || (now() - states[mac].lastMqttTs) > MQTT_TIMEOUT_MS) {\n    states[mac].mqttOk = false;\n}\n\nconst deviceState = states[mac];\nconst newCombinedState = (deviceState.pingOk && deviceState.mqttOk) ? 'online' : 'offline';\n\nif (newCombinedState !== oldState.lastCombinedState || deviceState.ping_ms !== oldState.ping_ms) {\n    states[mac].lastCombinedState = newCombinedState;\n    flow.set('deviceStates', states);\n    return { payload: { mac, status: newCombinedState, ping_ms: deviceState.ping_ms } };\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 620,
        "wires": [
            [
                "9708f9c81584ae9a",
                "6889d15e433846c7"
            ]
        ]
    },
    {
        "id": "0f3483727858d393",
        "type": "ping",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "Ping",
        "host": "192.168.42.30",
        "timer": "1",
        "inputs": 0,
        "x": 150,
        "y": 500,
        "wires": [
            [
                "1311921afd8b6feb",
                "01ffc9feb42a01f7"
            ]
        ]
    },
    {
        "id": "1311921afd8b6feb",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "name": "Check Ping and MQTT Then Send Status",
        "func": "// Get devices context\nlet devices = flow.get('devices') || {};\n\n// Map IP to MAC and Room Name\nconst ipMap = {\n  '192.168.42.30': { mac: '94:B9:7E:CE:01:EF', room: 'Server Room 1' }\n};\n\nconst ip = msg.topic;\nif (!ipMap[ip]) return null;\n\nconst mac = ipMap[ip].mac;\nconst room = ipMap[ip].room;\nconst now = Date.now();\n\nlet device = devices[mac] || { status: null, lastCheck: 0, room: room };\n\nconst newStatus = (msg.payload === false) ? 'offline' : 'online';\n\nif (newStatus !== device.status) {\n    device.status = newStatus;\n    device.lastCheck = now;\n    devices[mac] = device;\n    flow.set('devices', devices);\n    return {\n        payload: {\n            mac: mac,\n            room: room,\n            status: newStatus,\n            event_time: new Date().toISOString()\n        }\n    };\n}\n\ndevice.lastCheck = now;\ndevices[mac] = device;\nflow.set('devices', devices);\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 500,
        "wires": [
            [
                "10047dbe449cb4b0"
            ]
        ]
    },
    {
        "id": "10047dbe449cb4b0",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "name": "Status Switch",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "online",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "offline",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 420,
        "y": 560,
        "wires": [
            [
                "431c288dc98a3155"
            ],
            [
                "431c288dc98a3155"
            ]
        ]
    },
    {
        "id": "431c288dc98a3155",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "name": "Insert to DB",
        "func": "function toLocalSqlDate(d) {\n  d = d || new Date();\n  const local = new Date(d.getTime() - d.getTimezoneOffset() * 60000);\n  return local.toISOString().slice(0,19).replace('T',' ');\n}\nlet data = msg.payload;\nlet time = data.event_time\n  ? toLocalSqlDate(new Date(data.event_time))\n  : toLocalSqlDate();\n\nmsg.topic = `\n  INSERT INTO esp_status_log\n    (mac, room, status, time)\n  VALUES\n    (\n      '${data.mac}',\n      '${data.room.replace(/'/g,\"''\")}',\n      '${data.status}',\n      '${time}'\n    );\n`.replace(/\\s+/g,' ');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 560,
        "wires": [
            [
                "a5e565e3042098e8"
            ]
        ]
    },
    {
        "id": "d266684b84baf6ee",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "mydb": "5e560f07cfec117a",
        "name": "dht_22",
        "x": 630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "128af736ebd4f5cb",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Insert to dht22",
        "func": "\nlet d = msg.payload;\n\nif (!d.mac || !d.timestamp) {\n    node.error(\"‚ùå Missing mac or timestamp\", d);\n    return null;\n}\n\nmsg.topic = \"INSERT INTO `dht_22` (mac, pin, timestamp, min_temp, max_temp, avg_temp, min_hum, max_hum, avg_hum, temp_status,hum_status) VALUES (?,?,?,?,?,?,?,?,?,?,?);\";\n\nmsg.payload = [\n    d.mac,\n    d.pin,\n    d.timestamp,\n    d.min_temp,\n    d.max_temp,\n    d.avg_temp,\n    d.min_hum,\n    d.max_hum,\n    d.avg_hum,\n    d.temp_status,\n    d.hum_status\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            [
                "d266684b84baf6ee"
            ]
        ]
    },
    {
        "id": "a5e565e3042098e8",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "mydb": "5e560f07cfec117a",
        "name": "esp_status_log",
        "x": 760,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "5848de06518173ba",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "GET Config",
        "topic": "esp32/response/+/config",
        "qos": "1",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1970,
        "y": 320,
        "wires": [
            [
                "874c0c450dd51575"
            ]
        ]
    },
    {
        "id": "b24553a04b159354",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "name": "Check MQTT",
        "topic": "esp32/status",
        "qos": "2",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 620,
        "wires": [
            [
                "01ffc9feb42a01f7"
            ]
        ]
    },
    {
        "id": "8a4df22f9b7c306e",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Send status",
        "func": "// ‚ú® FIX: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ MAC ‡∏à‡∏≤‡∏Å DB ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô payload\nlet seen = Array.isArray(msg.payload) ? msg.payload : [];\nlet now = new Date();\n\n// ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° MAC Address\nconst seenByMac = seen.reduce((acc, curr) => {\n    const mac = curr.mac;\n    if (!acc[mac]) {\n        acc[mac] = [];\n    }\n    acc[mac].push(curr);\n    return acc;\n}, {});\n\n\nlet allResults = [];\n\n// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞ MAC ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠\nfor (const mac in seenByMac) {\n    const pinsForMac = seenByMac[mac];\n    let expected = [\"25\", \"26\", \"32\", \"33\"];\n\n    let result = expected.map(pin => {\n        let found = pinsForMac.find(r => r.pin == pin);\n\n        if (!found || !found.last_seen) {\n            return { mac: mac, pin: pin, status: \"OFFLINE\", last_seen: null };\n        }\n\n        let last = new Date(found.last_seen);\n        if (isNaN(last)) {\n            return { mac: mac, pin: pin, status: \"OFFLINE\", last_seen: found.last_seen };\n        }\n\n        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\n        let diffSeconds = (now.getTime() - last.getTime()) / 1000;\n        return {\n            mac: mac,\n            pin: pin,\n            last_seen: found.last_seen,\n            status: diffSeconds > 20 ? \"OFFLINE\" : \"ONLINE\"\n        };\n    });\n    allResults = allResults.concat(result);\n}\n\n\nmsg.payload = allResults;\nmsg.topic = 'pin_status_update';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 360,
        "wires": [
            [
                "9708f9c81584ae9a",
                "4557dd1bb41b4158"
            ]
        ]
    },
    {
        "id": "149454b95ccb8189",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "mydb": "5e560f07cfec117a",
        "name": "dht_22",
        "x": 550,
        "y": 360,
        "wires": [
            [
                "8a4df22f9b7c306e"
            ]
        ]
    },
    {
        "id": "099150f81e18ae84",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Check sensor offline",
        "func": "// ‚ú® FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ SELECT MAC Address ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô Query\nmsg.topic = `\nSELECT mac, pin, MAX(timestamp) AS last_seen\nFROM dht_22\nWHERE pin != 'OVERALL'\nGROUP BY mac, pin;\n`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "149454b95ccb8189"
            ]
        ]
    },
    {
        "id": "54ea2bf1620764ea",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "Every 1 sec",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 190,
        "y": 360,
        "wires": [
            [
                "099150f81e18ae84"
            ]
        ]
    },
    {
        "id": "8527f967384360ec",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Check reboot",
        "func": "// Check reboot (single + all) ‚Äî robust pending (by actionId & by mac)\nconst p = msg.payload || {};\nconst cmd = String(p.cmd || p.command || '').toLowerCase();\nconst actionId = String(p.actionId || '').trim();\nconst room = String(p.room_id || '').toLowerCase();\n\nif (!actionId) {\n  return [null, { payload: { actionId: null, status: 'error', message: 'missing actionId' } }];\n}\n\n// helpers\nfunction normMAC(s){\n  if(!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g,'');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':');\n}\n\nconst now = Date.now();\nconst TTL_MS = 120000;      // mapping room‚Üîmac ‡∏™‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ô‡∏≤‡∏ó‡∏µ\nconst ACK_TIMEOUT_MS = 60000;\n\n// contexts\nconst pendingByAction = flow.get('reboot_pending_by_action') || {}; // actionId -> { targets:Set, seen:Set }\nconst pendingByMac    = flow.get('reboot_pending_by_mac')    || {}; // mac -> actionId\nconst timers          = flow.get('reboot_timers')             || {}; // actionId -> timer\n\n// ========= Reboot All =========\nif (cmd === 'reboot_all' || room === 'all' || Array.isArray(p.mac_list)) {\n  let macs = Array.isArray(p.mac_list) ? p.mac_list.map(normMAC).filter(Boolean) : null;\n  if (!macs || macs.length === 0) {\n    const room2mac = flow.get('room2mac') || {};\n    macs = Object.values(room2mac).map(normMAC).filter(Boolean);\n  }\n  if (!macs.length) {\n    return [null, { payload: { actionId, status: 'error', message: 'no target MACs' } }];\n  }\n\n  // register pending (by actionId + by mac)\n  pendingByAction[actionId] = { targets: new Set(macs), seen: new Set() };\n  macs.forEach(m => { pendingByMac[m] = actionId; });\n\n  // timeout per actionId\n  if (timers[actionId]) clearTimeout(timers[actionId]);\n  timers[actionId] = setTimeout(() => {\n    const _pAct = flow.get('reboot_pending_by_action') || {};\n    const _tim  = flow.get('reboot_timers') || {};\n    const st = _pAct[actionId];\n    if (st) {\n      // cleanup mac->action\n      st.targets.forEach(m => { \n        let map = flow.get('reboot_pending_by_mac') || {};\n        if (map[m] === actionId) { delete map[m]; flow.set('reboot_pending_by_mac', map); }\n      });\n      delete _pAct[actionId];\n      delete _tim[actionId];\n      flow.set('reboot_pending_by_action', _pAct);\n      flow.set('reboot_timers', _tim);\n      node.send([null, { topic:'actions/ack', payload: { actionId, status:'timeout', message:'reboot_all partial/timeout' } }]);\n    }\n  }, ACK_TIMEOUT_MS);\n\n  flow.set('reboot_pending_by_action', pendingByAction);\n  flow.set('reboot_pending_by_mac', pendingByMac);\n  flow.set('reboot_timers', timers);\n\n  const outMsgs = macs.map(m => ({\n    topic: `esp32/control/${m}/reboot`,\n    payload: { cmd:'Reboot', room_id:null, mac:m, actionId, ts:now }\n  }));\n  const ack = { payload:{ actionId, status:'accepted', message:`broadcast to ${macs.length} devices`} };\n  return [outMsgs, ack];\n}\n\n// ========= Reboot Single =========\nlet mac = normMAC(p.mac);\nif (!mac && room) {\n  const room2mac = flow.get('room2mac') || {};\n  const room_seen = flow.get('room_seen') || {};\n  const m = normMAC(room2mac[room]);\n  const ts = room_seen[room] || 0;\n  if (m && (Date.now()-ts) <= TTL_MS) mac = m;\n}\nif (!mac) {\n  return [null, { payload: { actionId, status:'error', message:`no fresh mapping for ${room}` } }];\n}\n\npendingByAction[actionId] = { targets: new Set([mac]), seen: new Set() };\npendingByMac[mac] = actionId;\n\n// timeout per actionId\nif (timers[actionId]) clearTimeout(timers[actionId]);\ntimers[actionId] = setTimeout(() => {\n  const _pAct = flow.get('reboot_pending_by_action') || {};\n  const _pMac = flow.get('reboot_pending_by_mac') || {};\n  const _tim  = flow.get('reboot_timers') || {};\n  const st = _pAct[actionId];\n  if (st) {\n    st.targets.forEach(m => { if (_pMac[m] === actionId) delete _pMac[m]; });\n    delete _pAct[actionId];\n    delete _tim[actionId];\n    flow.set('reboot_pending_by_mac', _pMac);\n    flow.set('reboot_pending_by_action', _pAct);\n    flow.set('reboot_timers', _tim);\n    node.send([null, { topic:'actions/ack', payload:{ actionId, status:'timeout', message:`no response from ${mac}` } }]);\n  }\n}, ACK_TIMEOUT_MS);\n\nflow.set('reboot_pending_by_action', pendingByAction);\nflow.set('reboot_pending_by_mac', pendingByMac);\nflow.set('reboot_timers', timers);\n\nconst mqttMsg = {\n  topic: `esp32/control/${mac}/reboot`,\n  payload: { cmd:'Reboot', room_id:room||null, mac, actionId, ts:now }\n};\nconst ack = { payload:{ actionId, status:'accepted', message:`reboot sent to ${mac}` } };\nreturn [[mqttMsg], ack];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "59e009aee079776e"
            ],
            [
                "9708f9c81584ae9a"
            ]
        ]
    },
    {
        "id": "59e009aee079776e",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Send Reboot",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 1250,
        "y": 240,
        "wires": []
    },
    {
        "id": "62788c726b663f0d",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Reply reboot",
        "topic": "esp32/ack/+/reboot",
        "qos": "0",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 1030,
        "y": 240,
        "wires": [
            [
                "2d7312052d110181"
            ]
        ]
    },
    {
        "id": "2d7312052d110181",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Reply action",
        "func": "function normMAC(s) {\n  if (!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':');\n}\n\nconst topic = String(msg.topic || '');\n\n// ---------- parse payload ----------\nlet data = msg.payload;\nif (typeof data === 'string') { try { data = JSON.parse(data); } catch { return null; } }\nif (!data || typeof data !== 'object') return null;\n\nconst actionId = String(data.actionId || '').trim();\nconst status = String(data.status || (data.ok === true ? 'ok' : '')).toLowerCase() || 'ok';\nconst macPL = normMAC(data.mac);\n\nlet macTP = null, roomTP = null;\nlet m = topic.match(/^esp32\\/ack\\/([0-9A-F:]{17})\\/[^/]+$/i);\nif (m) macTP = normMAC(m[1]);\nm = topic.match(/^esp32\\/ack\\/(room-[abcd])\\/[^/]+$/i);\nif (m) roomTP = m[1].toLowerCase();\n\nlet mac = macPL || macTP || null;\nif (!mac && roomTP) {\n  const room2mac = flow.get('room2mac') || {};\n  mac = normMAC(room2mac[roomTP]);\n}\n\n// ---------- contexts ----------\nlet pByAct = flow.get('reboot_pending_by_action') || {}; // actionId -> {targets:Set, seen:Set}\nlet pByMac = flow.get('reboot_pending_by_mac') || {}; // mac -> actionId\nlet timers = flow.get('reboot_timers') || {};\n\nconst RECENT_TTL_MS = 30000; // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30s ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô\nlet recent = flow.get('ack_recent') || {};        // actionId -> { ts:number, seen:Set }\n\n// ---------- DE-DUP GUARD ----------\n// ‡∏ñ‡πâ‡∏≤ actionId ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ drop ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ (‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏∂‡πâ‡∏ô unmatched)\nif (actionId && !pByAct[actionId]) {\n  const r = recent[actionId];\n  if (r && (Date.now() - r.ts) <= RECENT_TTL_MS) {\n    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å log ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ node.status ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤\n    node.status({ fill: 'grey', shape: 'ring', text: `late/dup ACK: ${actionId}` });\n    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å mac ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏ß‡πâ (‡∏Å‡∏±‡∏ô‡∏•‡∏π‡∏õ)\n    if (mac) { r.seen = r.seen || new Set(); r.seen.add(mac); recent[actionId] = r; flow.set('ack_recent', recent); }\n    return null;\n  }\n}\n\n// ---------- PRIORITY 1: match by actionId ----------\nif (actionId && pByAct[actionId]) {\n  const st = pByAct[actionId]; // {targets:Set, seen:Set}\n  if (!st.seen) st.seen = new Set();\n  if (mac) st.seen.add(mac);\n\n  if (mac && pByMac[mac] === actionId) delete pByMac[mac];\n\n  const done = st.seen.size;\n  const total = st.targets.size;\n\n  // ‡∏Ñ‡∏£‡∏ö ‚Üí cleanup + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å recent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥\n  if (done >= total) {\n    if (timers[actionId]) { clearTimeout(timers[actionId]); delete timers[actionId]; }\n    delete pByAct[actionId];\n    recent[actionId] = { ts: Date.now(), seen: st.seen };\n  }\n\n  flow.set('reboot_pending_by_action', pByAct);\n  flow.set('reboot_pending_by_mac', pByMac);\n  flow.set('reboot_timers', timers);\n  flow.set('ack_recent', recent);\n\n  node.status({ fill: 'green', shape: 'dot', text: `ACK ${done}/${total}${mac ? ` from ${mac}` : ''}` });\n  return {\n    topic: 'actions/ack',\n    payload: {\n      actionId, status,\n      message: data.message || (done >= total ? 'ok' : `ACK ${done}/${total}`),\n      mac, done, total\n    }\n  };\n}\n\n// ---------- PRIORITY 2: match by mac ----------\nif (mac && pByMac[mac]) {\n  const aid = pByMac[mac];\n\n  if (pByAct[aid]) {\n    const st = pByAct[aid];\n    if (!st.seen) st.seen = new Set();\n    st.seen.add(mac);\n    if (st.seen.size >= st.targets.size) {\n      if (timers[aid]) { clearTimeout(timers[aid]); delete timers[aid]; }\n      delete pByAct[aid];\n      recent[aid] = { ts: Date.now(), seen: st.seen };\n    } else {\n      pByAct[aid] = st;\n    }\n  }\n  delete pByMac[mac];\n\n  flow.set('reboot_pending_by_action', pByAct);\n  flow.set('reboot_pending_by_mac', pByMac);\n  flow.set('reboot_timers', timers);\n  flow.set('ack_recent', recent);\n\n  node.status({ fill: 'green', shape: 'dot', text: `ACK by mac ${mac}` });\n  return {\n    topic: 'actions/ack',\n    payload: { actionId: aid, status, message: data.message || 'rebooting', mac }\n  };\n}\n\n// ---------- unmatched (‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô: late/dup ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ pending) ----------\nif (actionId) {\n  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô late ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô unmatched ‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n  recent[actionId] = { ts: Date.now(), seen: mac ? new Set([mac]) : new Set() };\n  flow.set('ack_recent', recent);\n  node.status({ fill: 'grey', shape: 'ring', text: `late ACK: ${actionId}` });\n  return null; // ‚ú® ‡πÑ‡∏°‡πà‡∏õ‡∏•‡πà‡∏≠‡∏¢ unmatched ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å\n}\n\n// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ actionId ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏Ñ‡πà‡∏≠‡∏¢‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ unmatched ‡πÄ‡∏ö‡∏≤ ‡πÜ\nnode.status({ fill: 'yellow', shape: 'ring', text: `ACK unmatched: ${mac || 'n/a'}` });\nreturn { topic: 'actions/ack', payload: { actionId: null, status, message: data.message || 'ACK unmatched', mac } };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 300,
        "wires": [
            [
                "9708f9c81584ae9a"
            ]
        ]
    },
    {
        "id": "61401c21d911973d",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Check Command",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1770,
        "y": 240,
        "wires": [
            [
                "84de7bd1374c55ed"
            ],
            [
                "2467960b4d1de17c"
            ]
        ]
    },
    {
        "id": "2467960b4d1de17c",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "SET Config",
        "topic": "esp32/set_config",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 1950,
        "y": 260,
        "wires": []
    },
    {
        "id": "f0c3bb733466c3cc",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Config Request",
        "topic": "esp32/commands",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 2120,
        "y": 220,
        "wires": []
    },
    {
        "id": "cef603b7eddadbd1",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "GET /api/data",
        "url": "/api/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1750,
        "y": 1180,
        "wires": [
            [
                "f365bff0639c4d0f"
            ]
        ]
    },
    {
        "id": "f365bff0639c4d0f",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "Query for chart",
        "func": "// ‡∏≠‡πà‡∏≤‡∏ô query params\nconst q = msg.req && msg.req.query ? msg.req.query : {};\nlet { start, end, mac, room, pins } = q;\n\n// helper: ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ISO ‚Üí MySQL DATETIME (local)\nfunction toSqlLocal(iso) {\n    if (!iso) return null;\n    const d = new Date(iso);\n    if (isNaN(d)) return null;\n    const tzFix = new Date(d.getTime() - d.getTimezoneOffset()*60000);\n    return tzFix.toISOString().slice(0,19).replace('T',' ');\n}\n\n// default ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\nconst now = new Date();\nconst defEnd = now.toISOString();\nconst defStart = new Date(now.getTime() - 24*60*60*1000).toISOString();\n\n// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå 24 ‡∏ä‡∏°.\nstart = toSqlLocal(start || defStart);\nend   = toSqlLocal(end   || defEnd);\n\n// ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á room ‡∏°‡∏≤ ‚Üí map ‡πÄ‡∏õ‡πá‡∏ô mac ‡∏à‡∏≤‡∏Å context ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\nif (!mac && room) {\n    try {\n        const r2m = flow.get('room2mac') || {};\n        const key = String(room).toLowerCase();\n        mac = r2m[key];\n    } catch(e) {}\n}\n\n// ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥\nif (!mac || !start || !end) {\n    // ‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏à‡∏∞‡πÉ‡∏´‡πâ MySQL ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ)\n    msg.statusCode = 400;\n    msg.payload = { error: \"missing mac/start/end\", hint: \"GET /api/data?mac=AA:BB:CC:DD:EE:FF&start=ISO&end=ISO\" };\n    // ‡∏ï‡∏¥‡∏î‡∏ò‡∏á‡πÉ‡∏´‡πâ http response ‡πÇ‡∏´‡∏ô‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ\n    msg._skipQuery = true;\n    return msg;\n}\n\n// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° pins ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô pins=OVERALL,25,26\nlet pinsArr = [];\nif (typeof pins === 'string' && pins.trim() !== '') {\n    pinsArr = pins.split(',').map(s => s.trim())\n        .filter(s => s.length)\n        .map(s => (/^\\d+$/.test(s) ? s : s.toUpperCase()));\n}\n\n// ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL (‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå avg/min/max + dewpoint ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô SQL)\n// Magnus formula: dp = (b*gamma)/(a-gamma)\n// gamma = ln(RH/100) + (a*T)/(b+T), a=17.62, b=243.12\nlet sql = `\nSELECT \n  mac,\n  pin,\n  timestamp,\n  min_temp,\n  max_temp,\n  avg_temp,\n  min_hum,\n  max_hum,\n  avg_hum,\n  (243.12 * (\n      LN(GREATEST(1e-6, avg_hum/100)) + (17.62*avg_temp)/(243.12+avg_temp)\n   ) ) / (\n      17.62 - (\n        LN(GREATEST(1e-6, avg_hum/100)) + (17.62*avg_temp)/(243.12+avg_temp)\n      )\n   ) AS dewpoint\nFROM dht_22\nWHERE mac = ?\n  AND timestamp BETWEEN ? AND ?\n`;\n\nconst params = [mac, start, end];\n\nif (pinsArr.length > 0) {\n    const qs = pinsArr.map(_ => '?').join(',');\n    sql += ` AND pin IN (${qs})`;\n    params.push(...pinsArr);\n}\n\nsql += ` ORDER BY timestamp ASC, pin ASC`;\n\nmsg.topic = sql;\nmsg.payload = params; // parameterized\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1180,
        "wires": [
            [
                "882559e213bde260"
            ]
        ]
    },
    {
        "id": "882559e213bde260",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "mydb": "5e560f07cfec117a",
        "name": "dht22",
        "x": 2070,
        "y": 1180,
        "wires": [
            [
                "04e1039fc59320a4"
            ]
        ]
    },
    {
        "id": "04e1039fc59320a4",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "JSON",
        "statusCode": "",
        "headers": {
            "content-type": "application/json; charset=utf-8"
        },
        "x": 2190,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c46318095bd096a9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "GET requestId",
        "func": "// remember_cfg_request (‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)\nconst p = msg.payload || {};\nconst now = Date.now();\nconst TTL_MS = 120000; // 120s\n\nfunction normMAC(s){\n  if(!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g,'');\n  if(s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':').toLowerCase();\n}\n\nconst keyMac = normMAC(p.mac);\nconst keyRoom = p.room ? String(p.room).toLowerCase() : (p.room_id ? String(p.room_id).toLowerCase() : null);\nconst key = keyMac || keyRoom;\n\nif (p.command === 'get_config' && p.requestId && key) {\n  const pending = flow.get('cfg_pending') || {};\n\n  // normalize existing value -> ensure it's an array\n  let list = pending[key];\n  if (list && !Array.isArray(list)) {\n    // legacy single object -> convert to array\n    if (typeof list === 'object' && list.requestId) {\n      list = [{ requestId: list.requestId, ts: list.ts || now }];\n    } else {\n      list = [];\n    }\n  }\n  if (!Array.isArray(list)) list = [];\n\n  // push new request (FIFO)\n  list.push({ requestId: p.requestId, ts: now });\n\n  // cleanup expired entries\n  pending[key] = list.filter(it => (now - (it.ts || 0)) <= TTL_MS);\n\n  flow.set('cfg_pending', pending);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 240,
        "wires": [
            [
                "61401c21d911973d",
                "8527f967384360ec"
            ]
        ]
    },
    {
        "id": "874c0c450dd51575",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "PUT requestId",
        "func": "// attach_cfg_requestId (‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö ESP32 ‡∏™‡πà‡∏á requestId ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏≠‡∏á)\nconst now = Date.now();\nconst TTL_MS = 120000; // 2 ‡∏ô‡∏≤‡∏ó‡∏µ\n\n// --- helpers ---\nfunction normMAC(s) {\n  if (!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':').toLowerCase();\n}\nfunction findMac(obj) {\n  if (!obj) return null;\n  if (typeof obj === 'string') {\n    const raw = obj.trim();\n    if (/^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/.test(raw)) return normMAC(raw);\n    const noSym = raw.replace(/[^0-9A-Fa-f]/g, '');\n    if (/^[0-9A-Fa-f]{12}$/.test(noSym)) return normMAC(noSym);\n  }\n  if (typeof obj === 'object') {\n    for (const k of ['mac_address', 'mac', 'device_mac']) {\n      const found = findMac(obj[k]);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n// --- contexts ---\nconst pending = flow.get('cfg_pending') || {};\nconst mac2room = flow.get('mac2room') || {}; // MAC(uppercase) -> room_id(lowercase)\n\n// --- extract ---\nconst topic = String(msg.topic || '');\nconst p = msg.payload || {};\n\n// ‡∏î‡∏∂‡∏á MAC/room ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥\nlet keyFromTopic = null;\nconst mt = topic.match(/^esp32\\/response\\/([^/]+)\\/config$/i);\nif (mt && mt[1]) {\n  const maybe = mt[1];\n  keyFromTopic = normMAC(maybe) || maybe.toLowerCase();\n}\nconst macFromPayload = findMac(p);\nconst roomFromPayload = (p.room_id || p.room) ? String(p.room_id || p.room).toLowerCase() : null;\n\n// 1) ‡∏ñ‡πâ‡∏≤ ESP32 ‡πÉ‡∏™‡πà requestId ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå pending ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠\nif (p.requestId) {\n  const rid = String(p.requestId).trim();\n  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° key ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å pending\n  const keys = new Set();\n\n  if (macFromPayload) {\n    keys.add(macFromPayload); // mac: aa:bb:...\n    const r = mac2room[macFromPayload.toUpperCase()];\n    if (r) keys.add(String(r).toLowerCase());\n  }\n  if (keyFromTopic) {\n    keys.add(keyFromTopic);\n    const r = mac2room[keyFromTopic.toUpperCase()];\n    if (r) keys.add(String(r).toLowerCase());\n  }\n  if (roomFromPayload) keys.add(roomFromPayload);\n\n  // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö rid ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ key ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á\n  let cleaned = 0;\n  for (const k of keys) {\n    const list = pending[k];\n    if (Array.isArray(list) && list.length) {\n      const fresh = list.filter(it => (now - (it.ts || 0)) <= TTL_MS);\n      const remain = fresh.filter(it => it.requestId !== rid);\n      if (remain.length !== fresh.length) cleaned++;\n      if (remain.length) pending[k] = remain;\n      else delete pending[k];\n    }\n  }\n  if (cleaned > 0) flow.set('cfg_pending', pending);\n\n  node.status({ fill: 'green', shape: 'dot', text: `Rx with requestId ${rid} (${cleaned ? 'cleaned' : 'no-pending'})` });\n  // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏Å requestId ‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\n  return msg;\n}\n\n// 2) ‡∏ñ‡πâ‡∏≤ ESP32 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà requestId ‡∏°‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°: ‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß pending\nlet candidates = new Set();\nif (macFromPayload) {\n  candidates.add(macFromPayload);\n  const r = mac2room[macFromPayload.toUpperCase()];\n  if (r) candidates.add(String(r).toLowerCase());\n}\nif (keyFromTopic) {\n  candidates.add(keyFromTopic);\n  const r = mac2room[keyFromTopic.toUpperCase()];\n  if (r) candidates.add(String(r).toLowerCase());\n}\nif (roomFromPayload) {\n  candidates.add(roomFromPayload);\n}\n\nnode.status({ text: `Candidates: ${Array.from(candidates).join(', ')}` });\n\nlet attached = false;\nfor (const key of candidates) {\n  if (!key || attached) continue;\n\n  const reqList = pending[key];\n  if (Array.isArray(reqList) && reqList.length > 0) {\n    const fresh = reqList.filter(it => (now - (it.ts || 0)) <= TTL_MS);\n    if (fresh.length > 0) {\n      const it = fresh.shift(); // FIFO\n      p.requestId = it.requestId;\n      msg.payload = p;\n\n      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï list\n      if (fresh.length > 0) pending[key] = fresh;\n      else delete pending[key];\n\n      flow.set('cfg_pending', pending);\n      attached = true;\n      node.status({ fill: 'green', shape: 'dot', text: `Attached ${it.requestId} via ${key}` });\n    } else {\n      delete pending[key];\n      flow.set('cfg_pending', pending);\n    }\n  }\n}\n\nif (!attached) {\n  node.warn({\n    note: 'no pending match for config response',\n    topic: msg.topic,\n    candidates: Array.from(candidates),\n    pendingKeys: Object.keys(pending)\n  });\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 300,
        "wires": [
            [
                "9708f9c81584ae9a"
            ]
        ]
    },
    {
        "id": "59b511670d45ce09",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "GET /api/device-map",
        "url": "/api/device-map",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1780,
        "y": 600,
        "wires": [
            [
                "945c7a052f56ca79"
            ]
        ]
    },
    {
        "id": "945c7a052f56ca79",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "Load Device Map",
        "func": "const deviceMap = flow.get('device_map', 'file') || {};\nmsg.payload = deviceMap;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 600,
        "wires": [
            [
                "4efc7f7d6266942a"
            ]
        ]
    },
    {
        "id": "4efc7f7d6266942a",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2160,
        "y": 600,
        "wires": []
    },
    {
        "id": "a1a2222d90a0dc17",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "POST /api/device-map",
        "url": "/api/device-map",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1780,
        "y": 640,
        "wires": [
            [
                "d487db29e6d6f598"
            ]
        ]
    },
    {
        "id": "d487db29e6d6f598",
        "type": "json",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1960,
        "y": 640,
        "wires": [
            [
                "7b38579d583a6efe"
            ]
        ]
    },
    {
        "id": "7b38579d583a6efe",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "Save Device Map",
        "func": "let data = msg.payload;\n\n// ‡πÅ‡∏õ‡∏•‡∏á string ‚Üí JSON ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string\nif (typeof data === 'string') {\n  try { data = JSON.parse(data); }\n  catch(e){\n    msg.statusCode = 400;\n    msg.payload = { ok:false, error:\"Cannot parse JSON\" };\n    return msg;\n  }\n}\n\n// ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô object\nif (!data || typeof data !== 'object') {\n  msg.statusCode = 400;\n  msg.payload = { ok:false, error:\"Expected JSON object\" };\n  return msg;\n}\n\n// ‡∏Å‡∏£‡∏≠‡∏á key: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ room*/name*\nconst out = {};\nfor (const [k,v] of Object.entries(data)) {\n  if (/^(room|name)[0-9a-z]+$/i.test(k)) out[k] = v;\n}\n\n// ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á file context\nflow.set('device_map', out, 'file');\n\n// ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö\nmsg.statusCode = 200;\nmsg.payload = { ok:true, saved_keys:Object.keys(out) };\nreturn msg;\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 640,
        "wires": [
            [
                "1ddb9f9c6361ecbd"
            ],
            []
        ]
    },
    {
        "id": "1ddb9f9c6361ecbd",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "OK or NOT",
        "statusCode": "",
        "headers": {},
        "x": 2300,
        "y": 640,
        "wires": []
    },
    {
        "id": "e7b602f8cdebf2d0",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "GET /api/pin-map",
        "url": "/api/pin-map",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1760,
        "y": 780,
        "wires": [
            [
                "9353c7268406244b"
            ]
        ]
    },
    {
        "id": "9353c7268406244b",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "Load Pin Map",
        "func": "let pinMap = global.get('pin_map');\nif (!pinMap) {\n    const src = global.get('mac_pin_names') || {};\n    const out = {};\n    for (const mac of Object.keys(src)) {\n        const obj = src[mac] || {};\n        const dst = {};\n        for (const k of Object.keys(obj)) {\n            const m = /^name_pin_(\\d+)$/.exec(k);\n            if (m && obj[k]) dst[m[1]] = String(obj[k]);\n        }\n        const MAC = String(mac).trim().toUpperCase();   // <<< normalize\n        out[MAC] = dst;\n    }\n    pinMap = out;\n    global.set('pin_map', pinMap);\n    flow.set('pin_map', pinMap);\n}\nmsg.payload = pinMap;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 780,
        "wires": [
            [
                "6d0dbf7cb49c607c"
            ]
        ]
    },
    {
        "id": "6d0dbf7cb49c607c",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2130,
        "y": 780,
        "wires": []
    },
    {
        "id": "4a3a5a1e6c60f650",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "POST /api/pin-map",
        "url": "/api/pin-map",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1770,
        "y": 820,
        "wires": [
            [
                "18017e07326c690f"
            ]
        ]
    },
    {
        "id": "18017e07326c690f",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "Save Pin Map",
        "func": "const b = msg.payload || {};\nconst macRaw = String(b.mac || '').trim();\nif (!macRaw) { msg.statusCode = 400; msg.payload = { ok:false, error:'MAC required' }; return msg; }\nconst MAC = macRaw.toUpperCase();  // <<< normalize\n\nconst pinMap = global.get('pin_map') || {};\nconst legacy = global.get('mac_pin_names') || {};\n\nconst normalized = {};\nif (b.map && typeof b.map === 'object') {\n  for (const k of Object.keys(b.map)) {\n    if (/^\\d+$/.test(k) && b.map[k]) normalized[k] = String(b.map[k]).trim();\n  }\n} else {\n  if (b.name_pin_25) normalized['25'] = String(b.name_pin_25).trim();\n  if (b.name_pin_26) normalized['26'] = String(b.name_pin_26).trim();\n  if (b.name_pin_32) normalized['32'] = String(b.name_pin_32).trim();\n  if (b.name_pin_33) normalized['33'] = String(b.name_pin_33).trim();\n}\n\n// merge ‡πÅ‡∏ó‡∏ô overwrite\nconst prev = pinMap[MAC] || {};\npinMap[MAC] = { ...prev, ...normalized };\n\nlegacy[MAC] = {\n  name_pin_25: pinMap[MAC]['25'] || '',\n  name_pin_26: pinMap[MAC]['26'] || '',\n  name_pin_32: pinMap[MAC]['32'] || '',\n  name_pin_33: pinMap[MAC]['33'] || ''\n};\n\nglobal.set('pin_map', pinMap);\nflow.set('pin_map', pinMap);\nglobal.set('mac_pin_names', legacy);\n\nmsg.statusCode = 200;\nmsg.payload = { ok:true, pin_map: pinMap[MAC] };\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 820,
        "wires": [
            [
                "2fd31bb845f90d86",
                "e1ce3e2fa4bb4a4e"
            ]
        ]
    },
    {
        "id": "2fd31bb845f90d86",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "200/400 Response",
        "statusCode": "",
        "headers": {},
        "x": 2270,
        "y": 820,
        "wires": []
    },
    {
        "id": "84de7bd1374c55ed",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Send topic",
        "func": "// REPLACE ENTIRE FUNCTION: Build topic (get_config)\nfunction normMAC(s) {\n  if (!s) return null;\n  s = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (s.length !== 12) return null;\n  return s.match(/.{2}/g).join(':').toLowerCase();\n}\nconst p = msg.payload || {};\nlet mac = normMAC(p.mac);\n\n// fallback: map ‡∏à‡∏≤‡∏Å room_id ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á mac ‡∏°‡∏≤\nif (!mac && p.room_id) {\n  const r2m = flow.get('room2mac') || {};\n  mac = normMAC(r2m[String(p.room_id).toLowerCase()]);\n}\nif (!mac) { node.warn('No MAC for get_config'); return null; }\n\nmsg.topic = `esp32/control/${mac}/request_config`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 220,
        "wires": [
            [
                "f0c3bb733466c3cc"
            ]
        ]
    },
    {
        "id": "0482f31f984f74b9",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "GET /api/uptime-history",
        "url": "/api/uptime-history",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2420,
        "y": 1180,
        "wires": [
            [
                "58589672a110f473"
            ]
        ]
    },
    {
        "id": "58589672a110f473",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "Query for uptime",
        "func": "// REPLACE ALL: Build SQL (Uptime History) ‚Äî stable ordering + strict validation\n\nfunction normMAC(s) {\n    if (!s) return null;\n    const hex = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n    if (hex.length !== 12) return null;\n    return hex.match(/.{2}/g).join(':');\n}\n\n// ‡∏£‡∏±‡∏ö ISO (UTC) ‡∏´‡∏£‡∏∑‡∏≠ 'YYYY-MM-DD HH:MM:SS' (local) ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô DATETIME local (‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DB)\nfunction toSqlAuto(s) {\n    if (!s) return null;\n    const v = String(s).trim();\n    if (v.includes('T')) {\n        const d = new Date(v);\n        if (isNaN(d)) return null;\n        const local = new Date(d.getTime() - d.getTimezoneOffset() * 60000);\n        return local.toISOString().slice(0, 19).replace('T', ' ');\n    }\n    if (/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/.test(v)) return v;\n    return null;\n}\n\n// 1) params\nconst q = msg.req?.query || {};\nlet { start, end, mac } = q;\nif (end === 'now') end = new Date().toISOString();\n\nconst macNorm = normMAC(mac);\nif (!macNorm || !start || !end) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Missing or invalid query parameters: mac, start, end\" };\n    return msg;\n}\n\nconst startSql = toSqlAuto(start);\nconst endSql = toSqlAuto(end);\nif (!startSql || !endSql) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid datetime format. Use ISO-8601 or 'YYYY-MM-DD HH:MM:SS' (local).\" };\n    return msg;\n}\n\nconst startMs = Date.parse(start);\nconst endMs = Date.parse(end);\nif (!(Number.isFinite(startMs) && Number.isFinite(endMs)) || endMs <= startMs) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"Invalid time range. Ensure start < end.\" };\n    return msg;\n}\n\n// 2) SQL: ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á + ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô start (stable order)\nconst sql = `\n(\n  SELECT id, status, time\n  FROM esp_status_log\n  WHERE mac = ? AND time >= ? AND time <= ?\n)\nUNION ALL\n(\n  SELECT id, status, time FROM (\n    SELECT id, status, time\n    FROM esp_status_log\n    WHERE mac = ? AND time < ?\n    ORDER BY time DESC, id DESC\n    LIMIT 1\n  ) AS prev_status\n)\nORDER BY time ASC, id ASC;\n`;\n\nmsg.topic = sql;\nmsg.payload = [macNorm, startSql, endSql, macNorm, startSql];\nmsg.timeRange = { start: startSql, end: endSql };\nmsg.mac = macNorm;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 1180,
        "wires": [
            [
                "eccd6e3261b7615b"
            ]
        ]
    },
    {
        "id": "eccd6e3261b7615b",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "mydb": "5e560f07cfec117a",
        "name": "Query Status Log",
        "x": 2830,
        "y": 1180,
        "wires": [
            [
                "6022786dd2200fa7"
            ]
        ]
    },
    {
        "id": "6022786dd2200fa7",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "Send data",
        "func": "// ====== Inputs ======\nconst rows = Array.isArray(msg.payload) ? msg.payload : [];\nconst { start, end } = msg.timeRange || {};\nconst mac = msg.mac;\n\n// ====== Guard: Validate Time Range ======\nconst startMs = new Date(start).getTime();\nconst endMs = new Date(end).getTime();\nif (!Number.isFinite(startMs) || !Number.isFinite(endMs) || endMs <= startMs) {\n    msg.payload = { uptime_pct: 0, segments: [], note: \"invalid time range\" };\n    return msg;\n}\n\n// ====== Get Live Status (for UI display only) ======\nconst states = flow.get('deviceStates') || {};\nconst live = states?.[mac] || null;\nconst liveState = live?.lastCombinedState || null;\nconst livePingMs = Number.isFinite(live?.ping_ms) ? live.ping_ms : null;\n\n// ‚ú® FIX: Sort by timestamp first, then by database ID to handle \"flapping\" status correctly ‚ú®\nconst list = rows\n    .map(r => ({ id: r.id, status: String(r.status || '').toLowerCase(), ts: new Date(r.time).getTime() }))\n    .filter(r => Number.isFinite(r.ts) && r.id)\n    .sort((a, b) => {\n        if (a.ts !== b.ts) {\n            return a.ts - b.ts;\n        }\n        return a.id - b.id; // Secondary sort by ID ensures correct order for same-timestamp events\n    });\n\n// ====== Handle Case: No Historical Data ======\nif (list.length === 0) {\n    const seg = {\n        status: liveState || 'offline',\n        startTime: new Date(startMs).toISOString(),\n        endTime: new Date(endMs).toISOString()\n    };\n    const onlineSec = (seg.status === 'online') ? (endMs - startMs) / 1000 : 0;\n    const totalSec = (endMs - startMs) / 1000;\n    msg.payload = {\n        uptime_pct: totalSec > 0 ? +(onlineSec / totalSec * 100).toFixed(2) : 0,\n        segments: [seg],\n        authority: 'no_data',\n        live: { state: liveState, ping_ms: livePingMs }\n    };\n    return msg;\n}\n\n// ====== New Uptime Calculation Logic ======\nconst segments = [];\nlet onlineMs = 0;\n\nlet cursor_ts = startMs;\nlet last_status = 'offline'; \n\nconst pointsBefore = list.filter(p => p.ts < startMs);\nif (pointsBefore.length > 0) {\n    last_status = pointsBefore[pointsBefore.length - 1].status;\n}\n\nfor (const point of list) {\n    // This condition is important for correctly establishing the state at the beginning of the window,\n    // especially when multiple events happen before the window starts.\n    if (point.ts < cursor_ts) {\n        last_status = point.status; // Update status for points before the window starts\n        continue;\n    }\n\n    const seg_end = Math.min(point.ts, endMs);\n\n    if (seg_end > cursor_ts) {\n         segments.push({\n            status: last_status,\n            startTime: new Date(cursor_ts).toISOString(),\n            endTime: new Date(seg_end).toISOString()\n        });\n        if (last_status === 'online') {\n            onlineMs += (seg_end - cursor_ts);\n        }\n    }\n\n    cursor_ts = point.ts;\n    last_status = point.status;\n\n    if (cursor_ts >= endMs) {\n        break;\n    }\n}\n\nif (cursor_ts < endMs) {\n    segments.push({\n        status: last_status,\n        startTime: new Date(cursor_ts).toISOString(),\n        endTime: new Date(endMs).toISOString()\n    });\n    if (last_status === 'online') {\n        onlineMs += (endMs - cursor_ts);\n    }\n}\n\n// ====== Final Calculation & Output ======\nconst totalMs = endMs - startMs;\nconst uptimePct = totalMs > 0 ? +(onlineMs / totalMs * 100).toFixed(2) : 0;\n\nmsg.payload = {\n    uptime_pct: uptimePct,\n    segments: segments,\n    authority: 'db_only', \n    live: { state: liveState, ping_ms: livePingMs }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3010,
        "y": 1180,
        "wires": [
            [
                "b28ee7c1ebe01f7f"
            ]
        ]
    },
    {
        "id": "b28ee7c1ebe01f7f",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "OK",
        "statusCode": "200",
        "headers": {
            "0": "{",
            "1": "\"",
            "2": "C",
            "3": "o",
            "4": "n",
            "5": "t",
            "6": "e",
            "7": "n",
            "8": "t",
            "9": "-",
            "10": "T",
            "11": "y",
            "12": "p",
            "13": "e",
            "14": "\"",
            "15": ":",
            "16": "\"",
            "17": "a",
            "18": "p",
            "19": "p",
            "20": "l",
            "21": "i",
            "22": "c",
            "23": "a",
            "24": "t",
            "25": "i",
            "26": "o",
            "27": "n",
            "28": "/",
            "29": "j",
            "30": "s",
            "31": "o",
            "32": "n",
            "33": "\"",
            "34": "}"
        },
        "x": 3150,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8ad81ad080bd81df",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "ESP32 Sensor Data",
        "topic": "esp32/+/dht",
        "qos": "2",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 820,
        "wires": [
            [
                "f8fa173138913533",
                "e83de35d3a2f5a12"
            ]
        ]
    },
    {
        "id": "bab874a3ec5e3d7f",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Check condition",
        "func": "// Function: eval_alert_v6.2 (Passes rule thresholds to output)\n\n// --- CONTEXTS ---\nvar states = flow.get('alert_states') || {};\nvar rules = global.get('effectiveRuleMap') || {};\nvar deviceMap = flow.get('device_map', 'file') || {};\nvar now = new Date();\nvar now_iso = now.toISOString();\n\nfunction getLocalSqlTimestamp() {\n    const d = new Date();\n    const tzOffset = d.getTimezoneOffset() * 60000;\n    const localTime = new Date(d.getTime() - tzOffset);\n    return localTime.toISOString().slice(0, 19).replace('T', ' ');\n}\nvar now_sql = getLocalSqlTimestamp();\n\n// --- INPUT PAYLOAD ---\nvar p = msg.payload;\nif (!p || !p.mac || !p.sensor_name || !p.metric || p.value === undefined) {\n    node.error(\"Invalid payload\", msg);\n    return null;\n}\n\nvar mac = p.mac;\nvar sensor = p.sensor_name;\nvar metric = p.metric;\nvar value = Number(p.value);\nvar dedup_key = `${mac}|${sensor}|${metric}`;\n\n// --- HELPERS ---\nfunction getEffectiveRule(mac, sensor, metric) {\n    var sensorKey = `${mac}|${sensor}|${metric}`;\n    if (rules[sensorKey]) return rules[sensorKey];\n    var overallKey = `${mac}|overall|${metric}`;\n    if (rules[overallKey]) return rules[overallKey];\n    return rules[`system_${metric}`] || {};\n}\nfunction numOrNull(x) {\n    return (x === undefined || x === null || x === '') ? null : Number(x);\n}\nfunction determineRawLevel(value, rule) {\n    var crit_max = numOrNull(rule.crit_max);\n    var crit_min = numOrNull(rule.crit_min);\n    var warn_max = numOrNull(rule.warn_max);\n    var warn_min = numOrNull(rule.warn_min);\n    if (crit_max !== null && value > crit_max) return 'critical';\n    if (crit_min !== null && value < crit_min) return 'critical';\n    if (warn_max !== null && value > warn_max) return 'warning';\n    if (warn_min !== null && value < warn_min) return 'warning';\n    return 'normal';\n}\nfunction uuidv4() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\nfunction getRoomName(mac) {\n    for (const key in deviceMap) {\n        if (key.startsWith('room') && deviceMap[key] === mac) {\n            const roomLetter = key.slice(-1).toUpperCase();\n            return deviceMap[`name${roomLetter}`] || mac;\n        }\n    }\n    return mac;\n}\n\nvar rule = getEffectiveRule(mac, sensor, metric);\nif (!rule.id) {\n    return null;\n}\n\n\nrule.warn_open_consec = rule.warn_open_consec ?? 2;\nrule.crit_open_consec = rule.crit_open_consec ?? 1;\nrule.clear_consec = rule.clear_consec ?? 2;\n\nvar state = states[dedup_key] || {\n    status: 'closed',\n    level: 'normal',\n    warn_count: 0,\n    crit_count: 0,\n    clear_count: 0,\n    event_id: null,\n};\n\n\nvar rawLevel = determineRawLevel(value, rule);\n\nif (rawLevel === 'normal') {\n    state.clear_count++;\n    state.warn_count = 0;\n    state.crit_count = 0;\n} else if (rawLevel === 'warning') {\n    state.warn_count++;\n    state.crit_count = 0;\n    state.clear_count = 0;\n} else {\n    state.crit_count++;\n    state.warn_count = 0;\n    state.clear_count = 0;\n}\n\nvar outputs = [null, null, null];\nvar room = getRoomName(mac);\n\n// A) RECOVERY: Close an existing open or acknowledged incident\nif ((state.status === 'open' || state.status === 'ack') && rawLevel === 'normal' && state.clear_count >= rule.clear_consec) {\n    const eventToClose = state.event_id;\n    const originalStatus = state.status;\n    const finalLevel = state.level;\n\n    state.status = 'recovery';\n    state.level = 'normal';\n\n    let updateSql;\n    let updatePayload;\n    let logNote = 'System Recovery';\n\n    if (originalStatus === 'ack') {\n        logNote = 'System Recovery (post-ack)';\n        updateSql = `\n            UPDATE \\`alert_events\\` \n            SET \\`status\\`='recovery', \\`closed_at\\`=?\n            WHERE \\`event_id\\`=? AND \\`status\\` = 'ack';\n        `;\n        updatePayload = [now_sql, eventToClose];\n    } else { // originalStatus must be 'open'\n        updateSql = `\n            UPDATE \\`alert_events\\` \n            SET \\`status\\`='recovery', \\`closed_at\\`=?, \\`ack_by\\`='System', \\`ack_note\\`=?\n            WHERE \\`event_id\\`=? AND \\`status\\` = 'open';\n        `; // ‚ú® ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1\n        updatePayload = [now_sql, logNote, eventToClose];\n    }\n\n    const logSql = `\n        INSERT INTO \\`alert_event_log\\` (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`note\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`) \n        VALUES (?, 'close', ?, ?, 'System', ?, ?, ?, ?, ?);\n    `; // ‚ú® ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2\n    const logPayload = [eventToClose, finalLevel, value, now_sql, logNote, mac, sensor, metric];\n\n    outputs[0] = {\n        topic: updateSql + logSql,\n        payload: [...updatePayload, ...logPayload]\n    };\n\n    // Pass essential info for notification\n    outputs[2] = {\n        payload: {\n            type: 'recovery',\n            event_id: eventToClose,\n            dedup_key: dedup_key,\n            mac,\n            sensor_name: sensor,\n            metric,\n            value: value,\n            ts: now_iso,\n            status: 'recovery',\n            room_name: room // <-- Pass room name\n        }\n    };\n}\n\n// B) OPEN NEW INCIDENT: Always a new row\nelse if (state.status === 'closed' && rawLevel !== 'normal') {\n    var newLevel = null;\n    if (rawLevel === 'critical' && state.crit_count >= rule.crit_open_consec) newLevel = 'critical';\n    else if (rawLevel === 'warning' && state.warn_count >= rule.warn_open_consec) newLevel = 'warning';\n\n    if (newLevel) {\n        state.status = 'open';\n        state.level = newLevel;\n        state.event_id = uuidv4();\n\n        outputs[0] = {\n            topic: `\n                INSERT INTO \\`alert_events\\` \n                    (\\`event_id\\`, \\`dedup_key\\`, \\`mac\\`, \\`room_name\\`, \\`sensor_name\\`, \\`metric\\`, \\`level\\`, \\`trigger_value\\`, \\`status\\`, \\`rule_id\\`, \\`opened_at\\`) \n                VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'open', ?, ?);\n                \n                INSERT INTO \\`alert_event_log\\` \n                    (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`) \n                VALUES (?, 'open', ?, ?, 'System', ?, ?, ?, ?);\n            `, // ‚ú® ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 3\n            payload: [\n                state.event_id, dedup_key, mac, room, sensor, metric, newLevel, value, rule.id, now_sql,\n                state.event_id, newLevel, value, now_sql, mac, sensor, metric\n            ]\n        };\n        // Pass essential info for notification\n        outputs[1] = {\n            payload: {\n                type: 'open',\n                level: newLevel,\n                event_id: state.event_id,\n                dedup_key: dedup_key,\n                mac,\n                sensor_name: sensor,\n                metric,\n                value,\n                ts: now_iso,\n                room_name: room, // <-- ADDED\n                warn_min: rule.warn_min, // <-- ADDED\n                warn_max: rule.warn_max  // <-- ADDED\n            }\n        };\n    }\n}\n\n// C) UPDATE EXISTING OPEN INCIDENT (Upgrade or Heartbeat)\nelse if (state.status === 'open' && rawLevel !== 'normal') {\n    const eventToUpdate = state.event_id;\n    if (state.level === 'warning' && rawLevel === 'critical' && state.crit_count >= rule.crit_open_consec) {\n        state.level = 'critical';\n        outputs[0] = {\n            topic: `\n                UPDATE \\`alert_events\\` \n                SET \\`level\\`='critical', \\`trigger_value\\`=?, \\`room_name\\`=? \n                WHERE \\`event_id\\`=?;\n                \n                INSERT INTO \\`alert_event_log\\` (\\`event_id\\`, \\`action\\`, \\`level\\`, \\`value\\`, \\`actor\\`, \\`ts\\`, \\`mac\\`, \\`sensor_name\\`, \\`metric\\`) \n                VALUES (?, 'upgrade', 'critical', ?, 'System', ?, ?, ?, ?);\n            `, // ‚ú® ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 4\n            payload: [\n                value, room, eventToUpdate,\n                eventToUpdate, value, now_sql, mac, sensor, metric\n            ]\n        };\n        // Pass essential info for notification\n        outputs[1] = {\n            payload: {\n                type: 'upgrade',\n                level: 'critical',\n                event_id: eventToUpdate,\n                dedup_key: dedup_key,\n                mac,\n                sensor_name: sensor,\n                metric,\n                value,\n                ts: now_iso,\n                room_name: room, // <-- ADDED\n                warn_min: rule.warn_min, // <-- ADDED\n                warn_max: rule.warn_max  // <-- ADDED\n            }\n        };\n    } else {\n        node.warn({\n            message: \"‚ù§Ô∏è Condition remains ABNORMAL. Sending heartbeat.\",\n            dedup_key: dedup_key,\n            event_id: state.event_id,\n            current_level: state.level\n        });\n        // Just a heartbeat update\n        outputs[0] = {\n            topic: `UPDATE \\`alert_events\\` SET \\`last_updated\\`=? WHERE \\`event_id\\`=?;`,\n            payload: [now_sql, eventToUpdate]\n        };\n    }\n}\n\nstates[dedup_key] = state;\nflow.set('alert_states', states);\n\nif (outputs.some(o => o !== null)) {\n    return outputs;\n}\nreturn null;",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 820,
        "wires": [
            [
                "40dc39f6a661c710"
            ],
            [
                "edb9aefa4d5efde1",
                "2a78b5cd6ba1b8d3"
            ],
            [
                "edb9aefa4d5efde1",
                "2a78b5cd6ba1b8d3"
            ]
        ]
    },
    {
        "id": "40dc39f6a661c710",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 850,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e24642fbead82f06",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "f11085f09044723f",
        "name": "Load Rules every 1 mins",
        "props": [],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 2730,
        "y": 820,
        "wires": [
            [
                "e1ce3e2fa4bb4a4e"
            ]
        ]
    },
    {
        "id": "36c585400f83a862",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "f11085f09044723f",
        "mydb": "5e560f07cfec117a",
        "name": "alert_rules",
        "x": 2690,
        "y": 880,
        "wires": [
            [
                "5c3e1788c6456b95"
            ]
        ]
    },
    {
        "id": "5c3e1788c6456b95",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "f11085f09044723f",
        "name": "Rule loader",
        "func": "// Function: load_rules_to_global (FIXED to include sensor_connectivity)\nconst rules = msg.payload;\nconst deviceMap = flow.get('device_map', 'file') || {};\n\n// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö (system-level rules) ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏µ\nconst systemTempRule = rules.find(r => r.scope === 'system' && r.metric === 'temp' && r.active) || {};\nconst systemHumRule = rules.find(r => r.scope === 'system' && r.metric === 'hum' && r.active) || {};\nconst systemConnRule = rules.find(r => r.scope === 'system' && r.metric === 'connectivity' && r.active) || {};\n// --- ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‚ú® ---\nconst systemSensorConnRule = rules.find(r => r.scope === 'system' && r.metric === 'sensor_connectivity' && r.active) || {};\n// --- ‚ú® ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‚ú® ---\n\nconst roomRules = rules.filter(r => r.scope === 'room' && r.active);\nconst sensorRules = rules.filter(r => r.scope === 'sensor' && r.active);\n\nconst effectiveMap = {};\n\nconst inherit = (specific, room, system) => {\n    const origins = {};\n    const merged = {};\n    const allKeys = new Set([...Object.keys(system), ...Object.keys(room), ...Object.keys(specific)]);\n\n    for (const key of allKeys) {\n        if (specific && specific[key] !== null && specific[key] !== undefined) {\n            merged[key] = specific[key];\n            origins[key] = 'sensor';\n        } else if (room && room[key] !== null && room[key] !== undefined) {\n            merged[key] = room[key];\n            origins[key] = 'room';\n        } else if (system && system[key] !== null && system[key] !== undefined) {\n            merged[key] = system[key];\n            origins[key] = 'system';\n        }\n    }\n    merged.origins = origins;\n    return merged;\n};\n\nconst allMacs = Object.values(deviceMap).filter(val => typeof val === 'string' && val.includes(':'));\n\nfor (const mac of allMacs) {\n    const sensorsForDevice = sensorRules.filter(r => r.mac === mac);\n\n    const roomTempRule = roomRules.find(r => r.mac === mac && r.metric === 'temp') || {};\n    const roomHumRule = roomRules.find(r => r.mac === mac && r.metric === 'hum') || {};\n\n    const overallTempKey = `${mac}|overall|temp`;\n    effectiveMap[overallTempKey] = inherit({}, roomTempRule, systemTempRule);\n\n    const overallHumKey = `${mac}|overall|hum`;\n    effectiveMap[overallHumKey] = inherit({}, roomHumRule, systemHumRule);\n\n    for (const sensorRule of sensorsForDevice) {\n        const key = `${mac}|${sensorRule.sensor_name}|${sensorRule.metric}`;\n        if (sensorRule.metric === 'temp') {\n            effectiveMap[key] = inherit(sensorRule, roomTempRule, systemTempRule);\n        } else if (sensorRule.metric === 'hum') {\n            effectiveMap[key] = inherit(sensorRule, roomHumRule, systemHumRule);\n        }\n    }\n}\n\neffectiveMap['system_temp'] = systemTempRule;\neffectiveMap['system_hum'] = systemHumRule;\neffectiveMap['system_connectivity'] = systemConnRule;\n// --- ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‚ú® ---\neffectiveMap['system_sensor_connectivity'] = systemSensorConnRule; \n// --- ‚ú® ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‚ú® ---\n\nglobal.set('effectiveRuleMap', effectiveMap);\nnode.status({ fill: 'green', shape: 'dot', text: `Loaded ${Object.keys(effectiveMap).length} effective rules` });\n\nreturn null;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 880,
        "wires": []
    },
    {
        "id": "785762e88fcf5492",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "GET /api/alerts",
        "url": "/api/alerts",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "c4ec9302faebc92a"
            ]
        ]
    },
    {
        "id": "c4ec9302faebc92a",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Query alert evet lists",
        "func": "// Function: Query alert event lists (V6 - More Robust History Query)\n\nconst q = (msg.req && msg.req.query) ? msg.req.query : {};\nconst statusFilter = (q.status || 'open,ack').toLowerCase();\nconst startDate = q.start;\nconst endDate = q.end;\n\nfunction toSqlDatetime(isoString) {\n    if (!isoString) return null;\n    try {\n        const d = new Date(isoString);\n        // Adjust for timezone to get local time for DB\n        const tzOffset = d.getTimezoneOffset() * 60000;\n        const localTime = new Date(d.getTime() - tzOffset);\n        return localTime.toISOString().slice(0, 19).replace('T', ' ');\n    } catch (e) {\n        return null;\n    }\n}\n\nlet sql = `\nSELECT \n    event_id, mac, room_name, sensor_name, metric, level, status,\n    opened_at, ack_at, closed_at, ack_by, ack_note, trigger_value,\n    CASE\n        WHEN status = 'closed' OR status = 'recovery' THEN closed_at\n        WHEN status = 'ack' THEN ack_at\n        ELSE opened_at\n    END AS display_time\nFROM alert_events\n`;\n\nconst conditions = [];\nconst params = [];\n\nconst statuses = statusFilter.split(',').map(s => s.trim()).filter(Boolean);\nif (statuses.length > 0) {\n    if (statuses.includes('closed')) {\n        if (!statuses.includes('recovery')) {\n            statuses.push('recovery');\n        }\n    }\n    conditions.push(`status IN (${statuses.map(() => '?').join(',')})`);\n    params.push(...statuses);\n}\n\nif (q.mac) {\n    conditions.push('mac = ?');\n    params.push(q.mac);\n}\n\n// ‚ú® FIX: Robust date filtering for history view\nif (statusFilter.includes('closed')) {\n    const startSql = toSqlDatetime(startDate);\n    const endSql = toSqlDatetime(endDate);\n    if (startSql && endSql) {\n        // Find events that were either opened OR closed within the time range.\n        // This ensures we catch events that might have started before the range but closed within it.\n        conditions.push('(opened_at BETWEEN ? AND ? OR closed_at BETWEEN ? AND ?)');\n        params.push(startSql, endSql, startSql, endSql);\n    }\n}\n\nif (conditions.length > 0) {\n    sql += ' WHERE ' + conditions.join(' AND ');\n}\n\nsql += ' ORDER BY display_time DESC';\n\nconst pageSize = parseInt(q.page_size, 10) || 50;\nconst page = parseInt(q.page, 10) || 1;\nconst offset = (page - 1) * pageSize;\nsql += ` LIMIT ${pageSize} OFFSET ${offset}`;\n\nmsg.topic = sql;\nmsg.payload = params;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1220,
        "wires": [
            [
                "72c7559d7d6aba22"
            ]
        ]
    },
    {
        "id": "72c7559d7d6aba22",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 170,
        "y": 1280,
        "wires": [
            [
                "b47e7018602a98b6"
            ]
        ]
    },
    {
        "id": "289352e7c0c2f154",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "200 OK (JSON)",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json; charset=utf-8"
        },
        "x": 640,
        "y": 1280,
        "wires": []
    },
    {
        "id": "d70cf71d9d4a7b90",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "GET /api/alert-rules/effective",
        "url": "/api/alert-rules/effective",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1480,
        "wires": [
            [
                "536682416efd33c1"
            ]
        ]
    },
    {
        "id": "536682416efd33c1",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "Per sensor rules",
        "func": "// ‡∏£‡∏±‡∏ö query params ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö\nconst q = msg.req.query;\nconst rules = global.get('effectiveRuleMap') || {};\n\n// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\nif (!q.mac || !q.sensor_name || !q.metric) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"mac, sensor_name, and metric are required query parameters\" };\n    return msg;\n}\n\n// ‡∏™‡∏£‡πâ‡∏≤‡∏á Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö (Sensor, Room, System) ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° metric ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏°‡∏≤\nconst sensorKey = `${q.mac}|${q.sensor_name}|${q.metric}`;\nconst roomKey = `${q.mac}|overall|${q.metric}`; // ‚ú® FIX: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Dynamic ‡∏ï‡∏≤‡∏° q.metric\nconst systemKey = `system_${q.metric}`;           // ‚ú® FIX: ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Dynamic ‡∏ï‡∏≤‡∏° q.metric\n\n// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Rule ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: Sensor -> Room -> System\nlet effectiveRule = rules[sensorKey] || rules[roomKey] || rules[systemKey] || {};\n\nmsg.payload = effectiveRule;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1480,
        "wires": [
            [
                "d160a84f3489e2ec"
            ]
        ]
    },
    {
        "id": "815b587ab45df4c7",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "PUT/api/alert-rules",
        "url": "/api/alert-rules",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 2690,
        "y": 640,
        "wires": [
            [
                "cfbe7be2bb75dc23"
            ]
        ]
    },
    {
        "id": "cfbe7be2bb75dc23",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Update rules",
        "func": "// Expects msg.payload to be an array of rule objects\nconst rulesToUpdate = Array.isArray(msg.payload) ? msg.payload : [msg.payload];\n\nif (rulesToUpdate.length === 0) {\n    msg.statusCode = 400;\n    msg.payload = { ok: false, error: \"Payload must be a non-empty array of rule objects.\" };\n    return msg;\n}\n\n// NOTE: This requires a UNIQUE key on (scope, mac, sensor_name, metric) in the DB table.\n// ‚ú® ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° 'active' ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå\nconst sql = `INSERT INTO alert_rules (\n    scope, mac, sensor_name, metric, active, \n    warn_min, warn_max, crit_min, crit_max, \n    warn_open_consec, crit_open_consec, clear_consec, \n    min_gap_seconds_warning, min_gap_seconds_critical, \n    repeat_minutes_warning, repeat_minutes_critical, \n    group_window_seconds, heartbeat_timeout_minutes\n) VALUES ? \nON DUPLICATE KEY UPDATE \n    active=VALUES(active), warn_min=VALUES(warn_min), warn_max=VALUES(warn_max), \n    crit_min=VALUES(crit_min), crit_max=VALUES(crit_max), \n    warn_open_consec=VALUES(warn_open_consec), crit_open_consec=VALUES(crit_open_consec), \n    clear_consec=VALUES(clear_consec), min_gap_seconds_warning=VALUES(min_gap_seconds_warning), \n    min_gap_seconds_critical=VALUES(min_gap_seconds_critical), repeat_minutes_warning=VALUES(repeat_minutes_warning), \n    repeat_minutes_critical=VALUES(repeat_minutes_critical), group_window_seconds=VALUES(group_window_seconds), \n    heartbeat_timeout_minutes=VALUES(heartbeat_timeout_minutes);`;\n\nconst values = rulesToUpdate.map(r => [\n    r.scope, r.mac || null, r.sensor_name || null, r.metric || null,\n    // ‚ú® ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 2: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ 'active'\n    // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á active: 0 ‡∏°‡∏≤ ‡∏Å‡πá‡πÉ‡∏ä‡πâ 0, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ default ‡πÄ‡∏õ‡πá‡∏ô 1 (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)\n    r.active !== undefined ? r.active : 1,\n    r.warn_min, r.warn_max, r.crit_min, r.crit_max,\n    r.warn_open_consec, r.crit_open_consec, r.clear_consec,\n    r.min_gap_seconds_warning, r.min_gap_seconds_critical,\n    r.repeat_minutes_warning, r.repeat_minutes_critical,\n    r.group_window_seconds, r.heartbeat_timeout_minutes\n]);\n\nmsg.topic = sql;\nmsg.payload = [values];\n\n// We need to trigger a rule reload after this is done.\nmsg.reload_rules = true;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 640,
        "wires": [
            [
                "c864607514d350c4"
            ]
        ]
    },
    {
        "id": "c864607514d350c4",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "mydb": "5e560f07cfec117a",
        "name": "alert_rules",
        "x": 3030,
        "y": 640,
        "wires": [
            [
                "bdb285d12433aad8"
            ]
        ]
    },
    {
        "id": "bdb285d12433aad8",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Prepare Response",
        "func": "msg.payload = { ok: true, message: `Updated ${msg.payload.affectedRows || 0} rules.` };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 640,
        "wires": [
            [
                "d54032355d69570c"
            ]
        ]
    },
    {
        "id": "e1ce3e2fa4bb4a4e",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "f11085f09044723f",
        "name": "Query rule",
        "func": "// ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏ô‡∏î Function: Build SQL for Rules\nmsg.topic = \"SELECT * FROM alert_rules WHERE active = 1 ORDER BY scope DESC\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2930,
        "y": 820,
        "wires": [
            [
                "36c585400f83a862"
            ]
        ]
    },
    {
        "id": "f8fa173138913533",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Adapt Payload",
        "func": "const pin_map = flow.get('pin_map') || global.get('pin_map') || {};\n\nfunction normMac(s) { return s ? String(s).trim().toUpperCase() : ''; }\n\nfunction resolveSensorName(macAddr, pinStr, fallbackName) {\n  const mac = normMac(macAddr);\n  const pin = (pinStr === 0 || pinStr) ? String(pinStr).trim() : '';\n  if (!mac) return String(fallbackName ?? pin ?? 'unknown');\n  if (!pin) return String(fallbackName ?? 'unknown');\n  const m = pin_map[mac] || {};\n  const direct = m?.[pin];\n  const alt = m?.['name_pin_' + pin];\n  const alias = m?.alias?.[pin];\n  return String(direct ?? alt ?? alias ?? fallbackName ?? pin ?? 'unknown');\n}\n\nfunction numOrNull(v) {\n  if (v === undefined || v === null || v === '') return null;\n  const n = Number(v);\n  return Number.isFinite(n) ? n : null;\n}\n\nconst p = msg.payload || {};\n\nlet mac = p.mac || p.MAC || (p.device && p.device.mac) || (p.header && p.header.mac);\nmac = normMac(mac);\n\nlet pin = p.pin;\nif (pin === undefined || pin === null) pin = p.sensor_pin;\nif (pin === undefined || pin === null) pin = p.pin_no;\n\nlet sensorNameIn = p.sensor_name ? String(p.sensor_name).trim() : null;\n\nconst temp = numOrNull(p.avg_temp) ?? numOrNull(p.temperature) ?? numOrNull(p.temp);\nconst hum = numOrNull(p.avg_hum) ?? numOrNull(p.humidity) ?? numOrNull(p.hum);\n\nif (!mac) {\n  node.warn({ where: 'adapt', drop: 'no-mac', raw: p });\n  return null;\n}\n\nconst sensor_name = resolveSensorName(mac, pin, sensorNameIn);\n\nlet sent = 0;\nif (temp !== null) {\n  node.send({ payload: { mac, sensor_name, metric: 'temp', value: temp, pin: (pin === 0 || pin) ? String(pin) : undefined } });\n  sent++;\n}\nif (hum !== null) {\n  node.send({ payload: { mac, sensor_name, metric: 'hum', value: hum, pin: (pin === 0 || pin) ? String(pin) : undefined } });\n  sent++;\n}\n\nif (!sent) {\n  node.warn({ where: 'adapt', drop: 'no-metrics', mac, pin: (pin === 0 || pin) ? String(pin) : undefined, sensor_name, raw: p });\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 820,
        "wires": [
            [
                "bab874a3ec5e3d7f"
            ]
        ]
    },
    {
        "id": "c96aa8cdedc6c4b8",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "GET /api/alert-rules",
        "url": "/api/alert-rules",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2690,
        "y": 700,
        "wires": [
            [
                "7c18457b582e4c85"
            ]
        ]
    },
    {
        "id": "7c18457b582e4c85",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Query get rules",
        "func": "// Function Node: Build SQL for GET /api/alert-rules\n\n// 1. ‡∏≠‡πà‡∏≤‡∏ô query parameters ‡∏à‡∏≤‡∏Å URL ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏™‡πà‡∏á‡∏°‡∏≤\nconst q = msg.req.query || {};\n\n// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL SELECT ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô\nlet sql = 'SELECT * FROM alert_rules';\nconst conditions = [];\nconst params = [];\n\n// 3. ‡∏ï‡πà‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE ‡∏ï‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤\nif (q.scope) {\n    conditions.push('scope = ?');\n    params.push(q.scope);\n}\nif (q.mac) {\n    conditions.push('mac = ?');\n    params.push(q.mac);\n}\nif (q.sensor_name) {\n    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö sensor_name ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô \"Rack 1\")\n    conditions.push('sensor_name = ?');\n    params.push(decodeURIComponent(q.sensor_name));\n}\n\n// 4. ‡∏ñ‡πâ‡∏≤‡∏£‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ç‡πâ‡∏≠ ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢ SQL\nif (conditions.length > 0) {\n    sql += ' WHERE ' + conditions.join(' AND ');\n}\n\n// 5. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° msg object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏ô‡∏î mysql\n// ‡πÉ‡∏ä‡πâ Parameterized Query (?) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô SQL Injection\nmsg.topic = sql;\nmsg.payload = params;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 700,
        "wires": [
            [
                "a7e285e70ff817c1"
            ]
        ]
    },
    {
        "id": "a7e285e70ff817c1",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "mydb": "5e560f07cfec117a",
        "name": "alert_rules",
        "x": 3050,
        "y": 700,
        "wires": [
            [
                "472eab2a072d1c93"
            ]
        ]
    },
    {
        "id": "472eab2a072d1c93",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "200 OK (JSON)",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json; charset=utf-8"
        },
        "x": 3220,
        "y": 700,
        "wires": []
    },
    {
        "id": "b47e7018602a98b6",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "wrap_alerts",
        "func": "const rows = Array.isArray(msg.payload) ? msg.payload : [];\nmsg.payload = { alerts: rows };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1280,
        "wires": [
            [
                "289352e7c0c2f154"
            ]
        ]
    },
    {
        "id": "271033183b121bd0",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "POST /api/alert-rules",
        "url": "/api/alert-rules",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 3150,
        "y": 780,
        "wires": [
            [
                "636d2940b0ca4e78"
            ]
        ]
    },
    {
        "id": "636d2940b0ca4e78",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Validate rules",
        "func": "// Function: normalize_and_validate_rules\n// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏™‡∏≤‡∏¢ error\n\nfunction normMac(s) {\n  if (!s) return null;\n  const hex = String(s).toUpperCase().replace(/[^0-9A-F]/g, '');\n  if (hex.length !== 12) return null;\n  return hex.match(/.{2}/g).join(':');\n}\n\nconst p = msg.payload || {};\nconst mac = normMac(p.mac);\n\n// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô\nif (!mac || !p.rules || !p.rules.temp || !p.rules.hum) {\n  msg.statusCode = 400;\n  msg.payload = { error: \"Invalid payload structure. Required: mac, rules.temp, rules.hum\" };\n  return [ null, msg ]; // ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏≤‡∏á output 2 (Error)\n}\n\nconst r = p.rules;\n\n// 2. ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏¢‡∏∞\nconst out = {\n  mac: mac,\n  temp: {\n    lo_crit: parseFloat(r.temp.lo_crit),\n    lo_warn: parseFloat(r.temp.lo_warn),\n    hi_warn: parseFloat(r.temp.hi_warn),\n    hi_crit: parseFloat(r.temp.hi_crit),\n  },\n  hum: {\n    lo_crit: parseFloat(r.hum.lo_crit),\n    lo_warn: parseFloat(r.hum.lo_warn),\n    hi_warn: parseFloat(r.hum.hi_warn),\n    hi_crit: parseFloat(r.hum.hi_crit),\n  }\n};\n\n// 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Logic ‡∏Ç‡∏≠‡∏á Threshold (‡πÄ‡∏ä‡πà‡∏ô warning ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ critical)\nconst t = out.temp;\nif (!(t.lo_crit <= t.lo_warn && t.lo_warn < t.hi_warn && t.hi_warn <= t.hi_crit)) {\n  msg.statusCode = 400;\n  msg.payload = { error: \"Invalid temperature threshold logic. Must be lo_crit <= lo_warn < hi_warn <= hi_crit.\" };\n  return [ null, msg ];\n}\n\nconst h = out.hum;\nif (!(h.lo_crit <= h.lo_warn && h.lo_warn < h.hi_warn && h.hi_warn <= h.hi_crit)) {\n  msg.statusCode = 400;\n  msg.payload = { error: \"Invalid humidity threshold logic.\" };\n  return [ null, msg ];\n}\n\n// ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏≤‡∏á output 1\nmsg.rules_normalized = out;\nreturn [ msg, null ];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3370,
        "y": 780,
        "wires": [
            [
                "ae3aa6d1a10c043e"
            ],
            [
                "cacb1e585749c38b"
            ]
        ]
    },
    {
        "id": "ae3aa6d1a10c043e",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "cache_rules",
        "func": "// Function: cache_rules_to_flow\n// ‡πÄ‡∏≠‡∏≤‡∏Å‡∏é‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Flow Context ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Evaluator ‡∏î‡∏∂‡∏á‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡πÜ\n\nconst rules = msg.rules_normalized;\n\n// ‡∏î‡∏∂‡∏á‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ß‡πà‡∏≤‡∏á‡πÜ)\nconst cache = flow.get('alert_rules_by_mac') || {};\n\n// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á MAC Address ‡∏ô‡∏µ‡πâ\ncache[rules.mac] = rules;\n\n// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Ñ‡∏ä‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡πÑ‡∏õ\nflow.set('alert_rules_by_mac', cache);\n\nnode.status({ fill: \"blue\", shape: \"dot\", text: `Rules for ${rules.mac} updated` });\n\nmsg.payload = { success: true, message: `Rules for ${rules.mac} have been saved.` };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 740,
        "wires": [
            [
                "6c05f5d1fd3fc7c0"
            ]
        ]
    },
    {
        "id": "cacb1e585749c38b",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "400 Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 3570,
        "y": 820,
        "wires": []
    },
    {
        "id": "6c05f5d1fd3fc7c0",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 3700,
        "y": 740,
        "wires": []
    },
    {
        "id": "d24eecc773475a0d",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sync ‡πÄ‡∏ß‡∏•‡∏≤ ESP32",
        "info": "",
        "x": 1790,
        "y": 420,
        "wires": []
    },
    {
        "id": "7d3c211e7f5ac418",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥-‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå",
        "info": "",
        "x": 280,
        "y": 200,
        "wires": []
    },
    {
        "id": "320af7eb35ac1c83",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "7bdaf4cb89927b60",
        "name": "‡πÄ‡∏ä‡πá‡∏Ñ Status ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô DB",
        "info": "",
        "x": 250,
        "y": 460,
        "wires": []
    },
    {
        "id": "4de2c1d8785509fe",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "bf24f1109e557024",
        "name": "Reboot Device",
        "info": "",
        "x": 1040,
        "y": 200,
        "wires": []
    },
    {
        "id": "6636d93cad979dc5",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "04363f3d44ea50b0",
        "name": "‡πÅ‡∏õ‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏Ç‡∏≠",
        "info": "",
        "x": 1500,
        "y": 200,
        "wires": []
    },
    {
        "id": "ec4ba7c4df1cd904",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "d314b1ded220aada",
        "name": "Load or Save Config",
        "info": "",
        "x": 1770,
        "y": 180,
        "wires": []
    },
    {
        "id": "d736f2dfb44cb98c",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "05736f525f0739c2",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Map mac to room",
        "info": "",
        "x": 1810,
        "y": 560,
        "wires": []
    },
    {
        "id": "ed784a8e66a138cd",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "63f59a4d8f7d47e7",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Map pin to room",
        "info": "",
        "x": 1790,
        "y": 740,
        "wires": []
    },
    {
        "id": "200d49b6f215cbff",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "0e0a16b3eb3063ee",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Query data ‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü Temp&Hum",
        "info": "",
        "x": 1840,
        "y": 1140,
        "wires": []
    },
    {
        "id": "91754b0ad2692269",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "b4a00978e789863d",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Query data ‡πÅ‡∏™‡∏î‡∏á Uptime",
        "info": "",
        "x": 2450,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d83d445d62969ded",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Every 5 minutes",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 2710,
        "y": 520,
        "wires": [
            [
                "4ecc2247b3a33d89"
            ]
        ]
    },
    {
        "id": "4ecc2247b3a33d89",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Request Config from Devices",
        "func": "// ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ config ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà Node-RED ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å\nconst roomToMac = flow.get('room2mac') || {};\nconst macs = Object.values(roomToMac);\n\nif (macs.length === 0) {\n    node.warn('No devices found in room2mac context. Cannot request config.');\n    return null;\n}\n\nconst messages = macs.map(mac => ({\n    topic: `esp32/control/${mac}/request_config`,\n    payload: {\n        command: \"get_config\",\n        mac: mac,\n        requestId: new Date().getTime()\n    }\n}));\n\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3020,
        "y": 520,
        "wires": [
            [
                "53bee7f5fd9eed25"
            ]
        ]
    },
    {
        "id": "53bee7f5fd9eed25",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Request Config",
        "topic": "esp32/commands",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 3240,
        "y": 520,
        "wires": []
    },
    {
        "id": "9f003438c0f5cb62",
        "type": "mqtt in",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Receive Config",
        "topic": "esp32/response/+/config",
        "qos": "1",
        "datatype": "json",
        "broker": "8301192ec347dbc9",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2680,
        "y": 580,
        "wires": [
            [
                "57b8ad027dff3e5a"
            ]
        ]
    },
    {
        "id": "57b8ad027dff3e5a",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Process Config to DB",
        "func": "// Function to process config from device and prepare it for the database API\n\nconst config = msg.payload || {};\nconst mac = config.mac_address || null;\n\n// Ensure the payload has the required structure\nif (!mac || !config.alerts) {\n    node.warn('Invalid config payload received. Missing mac_address or alerts object. Skipping DB update.');\n    return null;\n}\n\n// --- ‚ú® 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Default ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ---\nconst defaultRules = {\n    // ‡∏Ñ‡πà‡∏≤ Default ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î eval_alert_v6.1\n    warn_open_consec: 1,\n    crit_open_consec: 1,\n    clear_consec: 1,\n\n    // ‡∏Ñ‡πà‡∏≤ Default ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á\n    min_gap_seconds_warning: 60,\n    min_gap_seconds_critical: 60,\n    repeat_minutes_warning: 60,\n    repeat_minutes_critical: 15,\n    group_window_seconds: 0,\n    heartbeat_timeout_minutes: 15\n};\n\n// --- ‚ú® 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Default ---\n// ‡∏ñ‡πâ‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏´‡∏ô‡∏°‡∏≤ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default ‡πÅ‡∏ó‡∏ô‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\nconst sharedRules = {\n    warn_open_consec: config.alerts.warn_open_consec ?? defaultRules.warn_open_consec,\n    crit_open_consec: config.alerts.crit_open_consec ?? defaultRules.crit_open_consec,\n    clear_consec: config.alerts.clear_consec ?? defaultRules.clear_consec,\n    min_gap_seconds_warning: config.alerts.min_gap_seconds_warning ?? defaultRules.min_gap_seconds_warning,\n    min_gap_seconds_critical: config.alerts.min_gap_seconds_critical ?? defaultRules.min_gap_seconds_critical,\n    repeat_minutes_warning: config.alerts.repeat_minutes_warning ?? defaultRules.repeat_minutes_warning,\n    repeat_minutes_critical: config.alerts.repeat_minutes_critical ?? defaultRules.repeat_minutes_critical,\n    group_window_seconds: config.alerts.group_window_seconds ?? defaultRules.group_window_seconds,\n    heartbeat_timeout_minutes: config.alerts.heartbeat_timeout_minutes ?? defaultRules.heartbeat_timeout_minutes\n};\n\n\n// Prepare the payload in the format expected by our /api/alert-rules endpoint\nconst rulePayload = [\n    {\n        scope: \"room\",\n        mac: mac,\n        sensor_name: \"overall\",\n        metric: \"temp\",\n        active: 1,\n        crit_min: config.alerts.temp_crit_low,\n        warn_min: config.alerts.temp_warn_low,\n        warn_max: config.alerts.temp_warn_high,\n        crit_max: config.alerts.temp_crit_high,\n        ...sharedRules\n    },\n    {\n        scope: \"room\",\n        mac: mac,\n        sensor_name: \"overall\",\n        metric: \"hum\",\n        active: 1,\n        crit_min: config.alerts.hum_crit_low,\n        warn_min: config.alerts.hum_warn_low,\n        warn_max: config.alerts.hum_warn_high,\n        crit_max: config.alerts.hum_crit_high,\n        ...sharedRules\n    }\n];\n\n// Pass the prepared payload to the next node (HTTP Request)\nmsg.payload = rulePayload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 580,
        "wires": [
            [
                "8175b4f18a6f99c6"
            ]
        ]
    },
    {
        "id": "8175b4f18a6f99c6",
        "type": "http request",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "PUT /api/alert-rules",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/api/alert-rules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 3090,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "898e844961b8cd39",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Sync Alerts from Device to DB",
        "info": "",
        "x": 2720,
        "y": 480,
        "wires": []
    },
    {
        "id": "b715c447fd1d3326",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "ba826875d50440fd",
        "name": "GET",
        "func": "const payload = msg.payload;\n\n// 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Device Map ‡∏à‡∏≤‡∏Å file context\nconst deviceMap = flow.get('device_map', 'file') || {};\n\n// 2. ‡∏î‡∏∂‡∏á MAC address ‡∏à‡∏≤‡∏Å payload ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤\nconst mac = payload.mac;\n\nif (mac) {\n    // 3. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏´‡∏≤ room_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö MAC address ‡πÉ‡∏ô Device Map\n    for (const key in deviceMap) {\n        // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö MAC ‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ \"room\" ‡πÄ‡∏ä‡πà‡∏ô \"roomA\"\n        if (key.startsWith('room') && deviceMap[key] === mac) {\n            // 4. ‡πÑ‡∏î‡πâ room_id ‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏≤‡∏Å key: \"roomA\" -> \"room-a\")\n            const room_id = `room-${key.slice(-1).toLowerCase()}`;\n\n            // 5. ‡πÄ‡∏ï‡∏¥‡∏° room_id ‡∏•‡∏á‡πÉ‡∏ô payload\n            payload.room_id = room_id;\n            msg.payload = payload;\n            node.status({ fill: 'blue', shape: 'dot', text: `Enriched with room: ${room_id}` });\n            return msg;\n        }\n    }\n}\n\n// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MAC ‡πÉ‡∏ô Device Map ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ MAC ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏° room_id\nnode.warn(\"Cannot find a matching room_id for MAC: \" + mac);\nnode.status({ fill: 'yellow', shape: 'dot', text: 'No room match' });\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 300,
        "wires": [
            [
                "9cd0de312f0aaebf"
            ]
        ]
    },
    {
        "id": "d160a84f3489e2ec",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 620,
        "y": 1480,
        "wires": []
    },
    {
        "id": "d54032355d69570c",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "OK",
        "statusCode": "200",
        "headers": {},
        "x": 3370,
        "y": 640,
        "wires": []
    },
    {
        "id": "5d76859d4b52e850",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sensor ‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç",
        "info": "",
        "x": 230,
        "y": 740,
        "wires": []
    },
    {
        "id": "e23cd9a179d4070e",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "f11085f09044723f",
        "name": "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Alert",
        "info": "",
        "x": 2720,
        "y": 780,
        "wires": []
    },
    {
        "id": "2c5e9398eb0b6e17",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "‡πÇ‡∏´‡∏•‡∏î Alert ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö",
        "info": "",
        "x": 210,
        "y": 1180,
        "wires": []
    },
    {
        "id": "818d1ba0600fd4e4",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "name": "Update Room Name in DB",
        "func": "const newMap = msg.payload; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\nconst oldMap = flow.get('device_map', 'file') || {}; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Map ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å\n\nconst updates = [];\n\n// ‡∏´‡∏≤ MAC ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á\nfor (const key of ['roomA', 'roomB', 'roomC', 'roomD']) {\n    const nameKey = `name${key.slice(-1).toUpperCase()}`;\n    const oldName = oldMap[nameKey];\n    const newName = newMap[nameKey];\n    const mac = newMap[key];\n\n    if (mac && newName && oldName !== newName) {\n        updates.push({ mac: mac, newName: newName });\n    }\n}\n\nif (updates.length > 0) {\n    // ‡∏™‡∏£‡πâ‡∏≤‡∏á msg object ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n    const sqlMsg = {\n        topic: updates.map(u => `UPDATE alert_events SET room_name = '${u.newName.replace(/'/g, \"''\")}' WHERE mac = '${u.mac}';`).join(' '),\n        payload: null // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ payload ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß\n    };\n    return sqlMsg;\n}\n\nreturn null; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 420,
        "wires": [
            [
                "3f977e562c7cfa30"
            ]
        ]
    },
    {
        "id": "3f977e562c7cfa30",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "b43a3178c92d9fc0",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2350,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "002f7097bc63220c",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "POST /api/alerts/:id/ack",
        "url": "/api/alerts/:id/ack",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1020,
        "wires": [
            [
                "229b4521996cbe60"
            ]
        ]
    },
    {
        "id": "229b4521996cbe60",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "Insert ack",
        "func": "// Function: Prepare ACK Query (FIXED)\n\nconst eventId = msg.req.params.id;\nconst payload = msg.payload || {};\nconst ackNote = payload.ack_note || null;\nconst ackBy = payload.ack_by || 'WebAppUser';\nif (!eventId) {\n    msg.statusCode = 400;\n    msg.payload = { ok: false, error: 'Event ID is missing.' };\n    return msg;\n}\n\n// Create the multi-statement SQL\nmsg.topic = `\n    UPDATE \\`alert_events\\`\n       SET \\`status\\` = 'ack',\n           \\`ack_at\\` = NOW(),\n           \\`ack_by\\` = ?,\n           \\`ack_note\\` = ?,\n           \\`last_updated\\` = NOW()\n     WHERE \\`event_id\\` = ? AND \\`status\\` = 'open';\n    SELECT dedup_key FROM \\`alert_events\\` WHERE \\`event_id\\` = ?;\n`;\n\n// Add nowSql to the payload array for the ack_at field\nmsg.payload = [ackBy, ackNote, eventId, eventId];\n// Store the response to send back to the UI\nmsg._responsePayload = { ok: true, message: 'Alert acknowledged successfully.' };\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "526a0f4d7c13dbfa"
            ],
            [
                "526a0f4d7c13dbfa"
            ]
        ]
    },
    {
        "id": "526a0f4d7c13dbfa",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "mydb": "5e560f07cfec117a",
        "name": "alert_acks",
        "x": 650,
        "y": 1020,
        "wires": [
            [
                "0ca34c7a39856c53"
            ]
        ]
    },
    {
        "id": "c9fa0b4b9bb161cd",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 1080,
        "wires": []
    },
    {
        "id": "882fad44105f6afc",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "‡∏£‡∏±‡∏ö Action ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö Alert ‡∏°‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó",
        "info": "",
        "x": 240,
        "y": 980,
        "wires": []
    },
    {
        "id": "0ca34c7a39856c53",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "bc3f5b7e2b5083ca",
        "name": "Set Final Response",
        "func": "// Function: Update Context After ACK & Set Final Response\n\n// msg.payload ‡∏à‡∏≤‡∏Å MySQL ‡πÅ‡∏ö‡∏ö multi-statement ‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array [[...], [...]]\nconst dbResult = msg.payload;\n\n// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (SELECT) ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dedup_key ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\nif (Array.isArray(dbResult) && dbResult.length > 1 && Array.isArray(dbResult[1]) && dbResult[1].length > 0) {\n    const dedup_key = dbResult[1][0].dedup_key;\n    if (dedup_key) {\n        const states = flow.get('alert_states') || {};\n        if (states[dedup_key]) {\n            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô \"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥\" ‡∏Ç‡∏≠‡∏á Node-RED ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'ack'\n            states[dedup_key].status = 'ack';\n            flow.set('alert_states', states);\n            node.status({ fill: \"green\", shape: \"dot\", text: `Context updated for ${dedup_key}` });\n        } else {\n            node.warn(`State not found in context for dedup_key: ${dedup_key}`);\n        }\n    }\n}\n\n// ‡∏ô‡∏≥ Response ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ UI\nmsg.payload = msg._responsePayload || { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "c9fa0b4b9bb161cd"
            ]
        ]
    },
    {
        "id": "b699f43fb31872ac",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "c7e46bccde3fcec3",
        "name": "Load ‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ sensor ‡∏°‡∏≤‡πÉ‡∏ä‡πâ",
        "info": "",
        "x": 220,
        "y": 1440,
        "wires": []
    },
    {
        "id": "edb9aefa4d5efde1",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Toast Alert",
        "func": "// Function: Toast Alert (v5 - Added user-friendly message)\n\nconst p = msg.payload;\nconst deviceMap = flow.get('device_map', 'file') || {};\n\nfunction getRoomName(mac) {\n    try {\n        const macStr = String(mac || '');\n        for (const key in deviceMap) {\n            if (key.startsWith('room') && deviceMap[key] === macStr) {\n                const roomLetter = key.slice(-1).toUpperCase();\n                const roomName = deviceMap[`name${roomLetter}`];\n                return roomName || macStr;\n            }\n        }\n        return macStr;\n    } catch (e) {\n        return String(mac || 'UNKNOWN_MAC');\n    }\n}\n\nif (!p) return null;\n\nlet inferredType = null;\nif (p.type === 'open' || p.type === 'upgrade') inferredType = 'triggered';\nelse if (p.type === 'recovery' || p.status === 'recovery') inferredType = 'recovered';\n\nif (!inferredType) return null;\n\nconst out = {\n    type: inferredType,\n    room_name: getRoomName(p.mac),\n    metric: p.metric,\n    level: p.level,\n    value: p.value,\n    event_id: p.event_id,\n    sensor_name: p.sensor_name || p.sensor,\n    ts: p.ts || p.opened_at || p.closed_at\n};\n\n// --- ‚ú® ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú® ---\n// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô UI\nlet friendlyMessage = '';\nconst metric = String(p.metric).toLowerCase();\nconst value = p.value;\n\nif (metric === 'sensor_connectivity' || metric === 'connectivity') {\n    friendlyMessage = (value === 0) ? \"Offline\" : \"Online\";\n} else if (metric === 'temp') {\n    friendlyMessage = `${Number(value).toFixed(1)}¬∞C`;\n} else if (metric === 'hum') {\n    friendlyMessage = `${Number(value).toFixed(1)}%`;\n} else {\n    friendlyMessage = String(value);\n}\nout.message = friendlyMessage; // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô object\n// --- ‚ú® ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú® ---\n\n\nconst newTopic = inferredType === 'recovered' ? 'alert_recovered' : 'alert_event';\n\nreturn { topic: newTopic, payload: out };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 880,
        "wires": [
            [
                "9708f9c81584ae9a"
            ]
        ]
    },
    {
        "id": "02d0431db93e1519",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "GET /api/alerts/summary",
        "url": "/api/alerts/summary",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1620,
        "wires": [
            [
                "6f0a780603bc593e"
            ]
        ]
    },
    {
        "id": "ec7212763482d9e7",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 570,
        "y": 1620,
        "wires": [
            [
                "d0bf4edd88a42aed"
            ]
        ]
    },
    {
        "id": "d0bf4edd88a42aed",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "format JSON",
        "func": "// rows[0] -> {critical_count, warning_count, open_count}\nconst rows = msg.payload || [];\nconst r = rows[0] || {};\nmsg.payload = {\n  critical_count: Number(r.critical_count || 0),\n  warning_count:  Number(r.warning_count  || 0),\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1620,
        "wires": [
            [
                "154ee51f956aec0e"
            ]
        ]
    },
    {
        "id": "154ee51f956aec0e",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "200 JSON",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 1620,
        "wires": []
    },
    {
        "id": "6f0a780603bc593e",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "Query alert",
        "func": "msg.topic = `SELECT\n  SUM(CASE WHEN level = 'critical' AND status IN ('open','ack') THEN 1 ELSE 0 END) AS critical_count,\n  SUM(CASE WHEN level = 'warning'  AND status IN ('open','ack') THEN 1 ELSE 0 END) AS warning_count\nFROM alert_events;`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1620,
        "wires": [
            [
                "ec7212763482d9e7"
            ]
        ]
    },
    {
        "id": "0bdff17fceb940bf",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "902e9a6537069b8d",
        "name": "‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Alert",
        "info": "",
        "x": 180,
        "y": 1580,
        "wires": []
    },
    {
        "id": "6889d15e433846c7",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Adapt Offline Status for Alert",
        "func": "// Function Node: (NEW) Adapt Offline Status for Alert\n// ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á msg ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Ping/MQTT check ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö Alert ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ\n\nconst p = msg.payload;\n// ‡πÄ‡∏≠‡∏≤ event_id ‡πÅ‡∏•‡∏∞ level ‡∏à‡∏≤‡∏Å Flow context ‡∏°‡∏≤‡πÉ‡∏ä‡πâ\nconst states = flow.get('alert_states') || {};\nconst state = states[p.mac + '|device_status|connectivity'] || {};\n\n// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mac ‡πÅ‡∏•‡∏∞ status ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\nif (!p || !p.mac || !p.status) {\n    return null; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠\n}\n\n// 2. ‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏Ñ‡πà‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'offline'\n// ‡∏ñ‡πâ‡∏≤ 'online' ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ value = 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Recovery (‡∏õ‡∏¥‡∏î Alert)\nconst isOffline = (p.status.toLowerCase() === 'offline');\nconst alertValue = isOffline ? 0 : 1;\n\n// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Function 'Check condition and insert' (ID: 676bd48cd34d868a) ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£\nconst newPayload = {\n    mac: p.mac,\n    sensor_name: 'Device', // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå\n    metric: 'connectivity',     // Metric ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Alert ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ\n    value: alertValue,          // 0 = offline, 1 = online\n    ts: new Date().toISOString()\n};\n\n// 4. ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'online' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ event_id ‡∏Ç‡∏≠‡∏á alert ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö event_id ‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡∏Å‡∏±‡∏ö payload ‡∏î‡πâ‡∏ß‡∏¢\n// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Alert Engine ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î alert ‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô\nif (!isOffline && state.event_id) {\n    newPayload.event_id = state.event_id;\n    newPayload.level = state.level;\n    newPayload.status = state.status;\n}\n\nmsg.payload = newPayload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 760,
        "wires": [
            [
                "bab874a3ec5e3d7f"
            ]
        ]
    },
    {
        "id": "5ca3f959e50a896b",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Inject every second",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 1340,
        "wires": [
            [
                "0de9e2b71b06a40a"
            ]
        ]
    },
    {
        "id": "0de9e2b71b06a40a",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Query old alert",
        "func": "msg.topic = \"SELECT dedup_key, status, level, event_id FROM alert_events WHERE status = 'open' OR status = 'ack'\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1340,
        "wires": [
            [
                "95fa60aa68b20120"
            ]
        ]
    },
    {
        "id": "a3fd0dbfc2793eb9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "name": "Load old alert",
        "func": "const openAlerts = msg.payload || [];\nconst states = {};\n\nopenAlerts.forEach(alert => {\n    if (alert.dedup_key) {\n        states[alert.dedup_key] = {\n            status: alert.status,\n            level: alert.level,\n            event_id: alert.event_id,\n            // ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ count ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ\n            warn_count: 0,\n            crit_count: 0,\n            clear_count: 0\n        };\n    }\n});\n\nflow.set('alert_states', states);\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `Loaded ${openAlerts.length} active alerts from DB`\n});\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "95fa60aa68b20120",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "be536ff9b21472e1",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 610,
        "y": 1340,
        "wires": [
            [
                "a3fd0dbfc2793eb9"
            ]
        ]
    },
    {
        "id": "e83de35d3a2f5a12",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "system summary",
        "func": "// ‚úÖ Function Node: System Summary (V2 - Includes temp_rise_per_room)\n\n// --- Contexts ---\nlet liveData = flow.get('liveRoomData') || {};\nlet historyData = flow.get('historyRoomData') || {};\nconst deviceMap = flow.get('device_map', 'file') || {};\n\nconst BASELINE_SPAN_MS = 300000;   // 5 ‡∏ô‡∏≤‡∏ó‡∏µ\nconst BASELINE_STALE_MS = 3600000;  // 60 ‡∏ô‡∏≤‡∏ó‡∏µ\n\n// --- MAC ‚Üí RoomName map ---\nconst macToRoomInfo = {};\nfor (const key in deviceMap) {\n  if (!Object.prototype.hasOwnProperty.call(deviceMap, key)) continue;\n  if (key.startsWith('room')) {\n    const mac = deviceMap[key];\n    const idx = key.slice(-1).toUpperCase();\n    const nameKey = `name${idx}`;\n    const roomName = deviceMap[nameKey] || key;\n    if (mac) macToRoomInfo[mac] = { name: roomName };\n  }\n}\nfunction getRoomName(mac) {\n  return macToRoomInfo[mac] ? macToRoomInfo[mac].name : mac;\n}\n\n// --- Helpers ---\nfunction dewPointC(temp, rh) {\n  if (typeof temp !== 'number' || typeof rh !== 'number' || !isFinite(temp) || !isFinite(rh) || rh <= 0) return null;\n  const RH = Math.min(100, Math.max(0, rh));\n  const a = 17.62, b = 243.12;\n  const gamma = (a * temp) / (b + temp) + Math.log(RH / 100.0);\n  return (b * gamma) / (a - gamma);\n}\n\n// --- Input & Update liveData ---\nconst now = Date.now();\nconst mac = msg.payload.mac || msg.payload.mac_address || null;\nconst pin = msg.payload.pin;\n\nif (mac && pin === 'OVERALL') {\n  const roomName = getRoomName(mac);\n  if (roomName) {\n    const t_avg = Number(msg.payload.avg_temp);\n    const h_avg = Number(msg.payload.avg_hum);\n    const t_max = Number(msg.payload.max_temp);\n    const h_max = Number(msg.payload.max_hum);\n\n    liveData[mac] = {\n      mac,\n      name: roomName,\n      temp: isFinite(t_avg) ? t_avg : null,\n      hum: isFinite(h_avg) ? h_avg : null,\n      temp_max_device: isFinite(t_max) ? t_max : null,\n      hum_max_device: isFinite(h_max) ? h_max : null,\n      timestamp: now\n    };\n    flow.set('liveRoomData', liveData);\n  }\n}\n\n// --- Compute summary ---\nlet summary = {\n  temp_max: null, temp_max_room: null,\n  hum_max: null, hum_max_room: null,\n  dew_max: null, dew_max_room: null,\n  temp_rise_max: null, temp_rise_max_room: null,\n  temp_rise_per_room: {} // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà\n};\n\nconst rooms = Object.values(liveData);\nif (rooms.length > 0) {\n  for (const room of rooms) {\n    if (!room || !room.mac) continue;\n    const curMac = room.mac;\n\n    const tempForMax = room.temp_max_device ?? room.temp;\n    if (typeof tempForMax === 'number' && (summary.temp_max === null || tempForMax > summary.temp_max)) {\n      summary.temp_max = tempForMax;\n      summary.temp_max_room = room.name;\n    }\n\n    const humForMax = room.hum_max_device ?? room.hum;\n    if (typeof humForMax === 'number' && (summary.hum_max === null || humForMax > summary.hum_max)) {\n      summary.hum_max = humForMax;\n      summary.hum_max_room = room.name;\n    }\n\n    const dp = dewPointC(room.temp, room.hum);\n    if (dp !== null && (summary.dew_max === null || dp > summary.dew_max)) {\n      summary.dew_max = dp;\n      summary.dew_max_room = room.name;\n    }\n\n    const base = historyData[curMac];\n    if (base && typeof base.temp === 'number' && typeof room.temp === 'number') {\n      const rise = room.temp - base.temp;\n      // ‚ú® ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ rise ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ\n      summary.temp_rise_per_room[curMac] = rise;\n\n      if (summary.temp_rise_max === null || rise > summary.temp_rise_max) {\n        summary.temp_rise_max = rise;\n        summary.temp_rise_max_room = room.name;\n      }\n    }\n  }\n\n  if (summary.temp_rise_max === null) {\n    summary.temp_rise_max = 0;\n    summary.temp_rise_max_room = summary.temp_max_room;\n  }\n}\n\n// --- Refresh baselines & Persist ---\nObject.keys(liveData).forEach(m => {\n  const live = liveData[m];\n  const base = historyData[m];\n  if (!base || (live.timestamp - base.timestamp) >= BASELINE_SPAN_MS) {\n    historyData[m] = { ...live };\n  }\n});\nObject.keys(historyData).forEach(m => {\n  if (now - historyData[m].timestamp > BASELINE_STALE_MS) {\n    delete historyData[m];\n  }\n});\nflow.set('historyRoomData', historyData);\n\nmsg.payload = summary;\nmsg.topic = \"system_summary_pro\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 880,
        "wires": [
            [
                "9708f9c81584ae9a"
            ]
        ]
    },
    {
        "id": "de5e6ed809646311",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "GET /api/export",
        "url": "/api/export",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2720,
        "y": 1320,
        "wires": [
            [
                "82779c738ad44c4b"
            ]
        ]
    },
    {
        "id": "82779c738ad44c4b",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "1. Prepare Info & Sensor Query",
        "func": "const q = msg.req.query || {};\nconst { room, type, from, to, sensors } = q;\n\nif (!room || !type || !from || !to) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'Missing required parameters' };\n    return msg;\n}\n\nconst deviceMap = flow.get('device_map', 'file') || {};\nconst pinMap = global.get('mac_pin_names') || {};\nlet macs = [];\nlet roomNameMap = {};\nlet reportRoomName = 'Unknown'; // ‚ú® ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå\n\nif (room === 'all') {\n    reportRoomName = 'All_Rooms'; // ‚ú® ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö \"All\"\n    ['A', 'B', 'C', 'D'].forEach(char => {\n        const mac = deviceMap[`room${char}`];\n        if (mac && mac.includes(':')) {\n            macs.push(mac);\n            roomNameMap[mac] = deviceMap[`name${char}`] || `Room ${char}`;\n        }\n    });\n} else {\n    const roomKey = `room${room.slice(-1).toUpperCase()}`;\n    const nameKey = `name${room.slice(-1).toUpperCase()}`;\n    const mac = deviceMap[roomKey];\n    if (mac) {\n        macs.push(mac);\n        const customName = deviceMap[nameKey] || room.replace('-', ' ');\n        roomNameMap[mac] = customName;\n        reportRoomName = customName.replace(/\\s+/g, '_'); // ‚ú® ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå\n    } else {\n        reportRoomName = room.replace('-', '_');\n    }\n}\n\nif (macs.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = { error: `No MAC address found for room: ${room}` };\n    return msg;\n}\n\nmsg.reportInfo = {\n    type: type,\n    // ‚ú® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ reportRoomName\n    filename: `Report_${reportRoomName}_${new Date().toISOString().slice(0, 10)}.${type}`,\n    maps: {\n        roomNames: roomNameMap,\n        pinNames: pinMap\n    },\n    params: { from, to, macs, sensors, room: room }\n};\n\nlet sensorSql = `\nSELECT \n    t.timestamp, t.mac, t.pin AS sensor_pin, t.avg_temp AS temperature, t.avg_hum AS humidity,\n    (243.12 * (LN(GREATEST(1e-6, t.avg_hum/100)) + (17.62*t.avg_temp)/(243.12+t.avg_temp)) ) / (17.62 - (LN(GREATEST(1e-6, t.avg_hum/100)) + (17.62*t.avg_temp)/(243.12+t.avg_temp))) AS dew_point\nFROM dht_22 t\nWHERE t.mac IN (${macs.map(() => '?').join(',')}) AND t.timestamp BETWEEN ? AND ?`;\nconst sensorParams = [...macs, from, to];\n\nif (sensors && room !== 'all') {\n    const sensorList = sensors.split(',');\n    sensorSql += ` AND t.pin IN (${sensorList.map(() => '?').join(',')})`;\n    sensorParams.push(...sensorList);\n}\nsensorSql += ` ORDER BY t.timestamp ASC;`;\n\nmsg.topic = sensorSql;\nmsg.payload = sensorParams;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 1320,
        "wires": [
            [
                "258f6bf27fc6e1cf"
            ]
        ]
    },
    {
        "id": "258f6bf27fc6e1cf",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "mydb": "5e560f07cfec117a",
        "name": "Query Sensors",
        "x": 3180,
        "y": 1320,
        "wires": [
            [
                "57fe4cea096dc9a9"
            ]
        ]
    },
    {
        "id": "417fa61902dccc67",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "mydb": "5e560f07cfec117a",
        "name": "Query Alerts",
        "x": 2730,
        "y": 1380,
        "wires": [
            [
                "dc55c89f0ab0fef9"
            ]
        ]
    },
    {
        "id": "dc55c89f0ab0fef9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "3. Prepare Data",
        "func": "const alerts = msg.payload;\nconst sensors = msg.results.sensors;\nconst reportInfo = msg.reportInfo;\n\nif (!reportInfo) {\n    node.error(\"Critical Error: reportInfo object is missing.\", msg);\n    msg.statusCode = 500;\n    msg.payload = \"Server error: Could not process report data.\";\n    return msg;\n}\n\nconst { roomNames, pinNames } = reportInfo.maps;\n\nconst formatDate = (isoString) => {\n    if (!isoString) return '';\n    try {\n        return new Date(isoString).toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });\n    } catch (e) { return isoString; }\n};\n\n// ‚ú® FIX: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ map ‡∏ä‡∏∑‡πà‡∏≠ Metric ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‚ú®\nconst metricMap = {\n    temp: 'Temperature',\n    hum: 'Humidity',\n    connectivity: 'Connectivity',\n    sensor_connectivity: 'Sensor Connectivity'\n};\n\nmsg.formattedData = {\n    sensors: sensors.map(s => {\n        const sensor_name = (pinNames[s.mac] && pinNames[s.mac][`name_pin_${s.sensor_pin}`]) || `Pin ${s.sensor_pin}`;\n        return {\n            'Timestamp': formatDate(s.timestamp),\n            'Room Name': roomNames[s.mac] || s.mac,\n            'MAC Address': s.mac,\n            'Sensor Pin': s.sensor_pin,\n            'Sensor Name': sensor_name,\n            'Temperature (¬∞C)': (s.temperature === null || s.temperature === undefined) ? null : Number(Number(s.temperature).toFixed(2)),\n            'Humidity (%)': (s.humidity === null || s.humidity === undefined) ? null : Number(Number(s.humidity).toFixed(2)),\n            'Dew Point (¬∞C)': (s.dew_point === null || s.dew_point === undefined) ? null : Number(Number(s.dew_point).toFixed(2)),\n        };\n    }),\n    alerts: alerts.map(a => ({\n        'Alert Time': formatDate(a.alert_time),\n        'Room Name': a.room_name,\n        'Sensor Name': a.sensor_name,\n        'Metric Raw': a.metric_raw,                  // << ‡πÉ‡∏™‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏î‡∏¥‡∏ö\n        'Metric': metricMap[a.metric] || a.metric,   // << ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á normalize\n        'Level': a.level,\n        'Value': a.trigger_value,\n        'Status': a.status,\n        'Ack By': a.acknowledged_by,\n        'Ack Time': formatDate(a.acknowledged_time),\n        'Closed Time': formatDate(a.closed_time)\n    }))\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2900,
        "y": 1380,
        "wires": [
            [
                "f3110649b75fa1f6"
            ]
        ]
    },
    {
        "id": "f3110649b75fa1f6",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "Switch by Type",
        "property": "reportInfo.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "csv",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "xlsx",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 3080,
        "y": 1380,
        "wires": [
            [
                "3e79a8b6fddc2caf"
            ],
            []
        ]
    },
    {
        "id": "3e79a8b6fddc2caf",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "4a. Create CSV String",
        "func": "const { sensors, alerts } = msg.formattedData;\nconst { filename } = msg.reportInfo;\n\nconst csvSafe = (val) => {\n    if (val === null || val === undefined) return '';\n    let str = String(val);\n    if (str.includes(',') || str.includes('\"') || str.includes('\\n')) {\n        str = str.replace(/\"/g, '\"\"');\n        return `\"${str}\"`;\n    }\n    return str;\n};\n\nlet csvString = '';\n\nconst sensorHeaders = ['Timestamp', 'Room Name', 'MAC Address', 'Sensor Pin', 'Sensor Name', 'Temperature (¬∞C)', 'Humidity (%)', 'Dew Point (¬∞C)'];\ncsvString += '### SENSOR DATA ###\\n';\ncsvString += sensorHeaders.join(',') + '\\n';\nsensors.forEach(s => {\n    const row = sensorHeaders.map(h => csvSafe(s[h]));\n    csvString += row.join(',') + '\\n';\n});\n\nconst alertHeaders = ['Alert Time', 'Room Name', 'Sensor Name', 'Metric Raw', 'Metric', 'Level', 'Value', 'Status', 'Ack By', 'Ack Time', 'Closed Time'];\ncsvString += '\\n### ALERT HISTORY ###\\n';\ncsvString += alertHeaders.join(',') + '\\n';\nalerts.forEach(a => {\n    const row = alertHeaders.map(h => csvSafe(a[h]));\n    csvString += row.join(',') + '\\n';\n});\n\nmsg.headers = { 'Content-Disposition': `attachment; filename=\"${filename}\"`, 'Content-Type': 'text/csv; charset=utf-8' };\nmsg.payload = csvString;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 1380,
        "wires": [
            [
                "7f021b2b6bf737d9"
            ]
        ]
    },
    {
        "id": "a7081151ab3a2ad4",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "File Response",
        "statusCode": "",
        "headers": {},
        "x": 3700,
        "y": 1380,
        "wires": []
    },
    {
        "id": "7f021b2b6bf737d9",
        "type": "change",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "5. Set Final Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{     \"Content-Disposition\": \"attachment; filename=\\\"\" & ($exists(msg.finalFilename) ? msg.finalFilename : msg.reportInfo.filename) & \"\\\"\",     \"Content-Type\": msg.reportInfo.type = \"xlsx\" ? \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" : \"text/csv; charset=utf-8\"}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3500,
        "y": 1380,
        "wires": [
            [
                "a7081151ab3a2ad4"
            ]
        ]
    },
    {
        "id": "d1b0a1c3da91e3c6",
        "type": "mqtt out",
        "z": "640c6734fdac3595",
        "g": "3405bc2648d0e0c4",
        "name": "Send rules to device",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8301192ec347dbc9",
        "x": 3260,
        "y": 880,
        "wires": []
    },
    {
        "id": "31093562cb7659a0",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "GET /unseen_recoveries",
        "url": "/unseen_recoveries",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1790,
        "y": 1000,
        "wires": [
            [
                "f253a7b1c4d4eb47"
            ]
        ]
    },
    {
        "id": "f253a7b1c4d4eb47",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Query recoverd",
        "func": "// üéØ GOAL: Query DB for unseen recovery events within the last 7 days.\nmsg.topic = `\n    SELECT event_id \n    FROM alert_events \n    WHERE status = 'recovery' AND closed_at >= NOW() - INTERVAL 7 DAY;\n`;\nmsg.payload = []; // No params\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 1000,
        "wires": [
            [
                "297a1b865a994b0b"
            ]
        ]
    },
    {
        "id": "297a1b865a994b0b",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2170,
        "y": 1000,
        "wires": [
            [
                "3981f0f3d29a470c"
            ]
        ]
    },
    {
        "id": "3981f0f3d29a470c",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "format",
        "func": "// üéØ GOAL: Format the result into a simple array of event_ids.\nmsg.payload = msg.payload.map(item => item.event_id);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1000,
        "wires": [
            [
                "ee048f67cf4fa1d6"
            ]
        ]
    },
    {
        "id": "ee048f67cf4fa1d6",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2440,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b8274aa11208401e",
        "type": "switch",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mark_as_seen",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1730,
        "y": 960,
        "wires": [
            [
                "5d0f5e25fa5197c3"
            ]
        ]
    },
    {
        "id": "5d0f5e25fa5197c3",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Update recoverd(seen)",
        "func": "// üéØ GOAL: Update status from 'recovery' to 'closed' for a given event_id.\nconst eventId = msg.payload;\nif (typeof eventId !== 'string' || !eventId) {\n    node.warn(\"Invalid event_id for mark_as_seen\");\n    return null;\n}\nmsg.topic = \"UPDATE alert_events SET status = 'closed' WHERE event_id = ? AND status = 'recovery';\";\nmsg.payload = [eventId];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 960,
        "wires": [
            [
                "6373aa23303841cf"
            ]
        ]
    },
    {
        "id": "6373aa23303841cf",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2090,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "15d9dbfd0c8ce0cb",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Alert recovery ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô",
        "info": "",
        "x": 1820,
        "y": 920,
        "wires": []
    },
    {
        "id": "2a5b63a94c933684",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Auto-Clear",
        "props": [],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1770,
        "y": 1040,
        "wires": [
            [
                "734ded21c1daba8b"
            ]
        ]
    },
    {
        "id": "734ded21c1daba8b",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "name": "Auto clear alert 7 days",
        "func": "// üéØ GOAL: Close all 'recovery' events older than 7 days.\nmsg.topic = `\n    UPDATE alert_events\n    SET status = 'closed'\n    WHERE status = 'recovery' AND closed_at < NOW() - INTERVAL 7 DAY;\n`;\nmsg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 1040,
        "wires": [
            [
                "33ca16f0ac839ca5"
            ]
        ]
    },
    {
        "id": "6e94b291e5b12d2d",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Report CSV",
        "info": "",
        "x": 2740,
        "y": 1280,
        "wires": []
    },
    {
        "id": "33ca16f0ac839ca5",
        "type": "mysql",
        "z": "640c6734fdac3595",
        "g": "48904a14f4cbefb3",
        "mydb": "5e560f07cfec117a",
        "name": "alert_events",
        "x": 2170,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "e6ece526bf9c5d21",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "GET /api/notification-settings",
        "url": "/api/notification-settings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1800,
        "y": 1320,
        "wires": [
            [
                "eb744f586a753274"
            ]
        ]
    },
    {
        "id": "eb744f586a753274",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "Load Notification Settings",
        "func": "// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô \"‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà\" ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nconst settings = flow.get('notificationSettings') || {\n    recipients: {\n        email: [],\n        telegram: []\n    },\n    schedule: {\n        weekdays: [true, true, true, true, true, true, true],\n        configs: [{ sendAt: \"08:00\", rangeStart: \"17:00\", rangeEnd: \"08:00\" }]\n    }\n};\n\nmsg.payload = settings;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1320,
        "wires": [
            [
                "745071770a1a0681"
            ]
        ]
    },
    {
        "id": "745071770a1a0681",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2240,
        "y": 1320,
        "wires": []
    },
    {
        "id": "3733a98c8c4bb892",
        "type": "http in",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "POST /api/notification-settings",
        "url": "/api/notification-settings",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1800,
        "y": 1360,
        "wires": [
            [
                "2856459866b453a6"
            ]
        ]
    },
    {
        "id": "2856459866b453a6",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "Validate & Set Defaults",
        "func": "// msg.payload ‡∏Ñ‡∏∑‡∏≠ JSON ‡∏ó‡∏µ‡πà UI ‡∏™‡πà‡∏á‡∏°‡∏≤\nlet payload = msg.payload;\n\n// --- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Recipients ---\nif (!payload.recipients) {\n    payload.recipients = { email: [], telegram: [] };\n}\nif (!Array.isArray(payload.recipients.email)) {\n    payload.recipients.email = [];\n}\nif (!Array.isArray(payload.recipients.telegram)) {\n    payload.recipients.telegram = [];\n}\n\n// --- 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Schedule (‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà) ---\nconst defaults = {\n    weekdays: [true, true, true, true, true, true, true],\n    configs: [{ sendAt: \"08:00\", rangeStart: \"17:00\", rangeEnd: \"08:00\" }]\n};\n\nlet schedule = payload.schedule;\nlet isScheduleInvalid = true;\n\n// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ schedule.configs ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\nif (schedule && Array.isArray(schedule.weekdays) && schedule.weekdays.length === 7 && Array.isArray(schedule.configs)) {\n    // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡∏´‡∏°‡∏î)\n    isScheduleInvalid = false;\n}\n\n// ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Default\nif (isScheduleInvalid) {\n    node.warn(\"Received empty or invalid schedule. Applying default settings.\");\n    payload.schedule = defaults;\n}\n\nmsg.payload = payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 1360,
        "wires": [
            [
                "980e30697c2aab77"
            ]
        ]
    },
    {
        "id": "980e30697c2aab77",
        "type": "change",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "Save to Flow Context",
        "rules": [
            {
                "t": "set",
                "p": "notificationSettings",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2310,
        "y": 1360,
        "wires": [
            [
                "b86f5c06d6692e5c",
                "96f558ac37e73c8c"
            ]
        ]
    },
    {
        "id": "b86f5c06d6692e5c",
        "type": "http response",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 2510,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c7f125caa48b240c",
        "type": "inject",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "On Deploy",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str",
                "v": "load_schedule"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1770,
        "y": 1400,
        "wires": [
            [
                "96f558ac37e73c8c"
            ]
        ]
    },
    {
        "id": "96f558ac37e73c8c",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "Update Cron Schedule",
        "func": "// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å UI ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô\nconst DEFAULT_SETTINGS = {\n    recipients: { email: [], telegram: [] },\n    schedule: {\n        weekdays: [true, true, true, true, true, true, true],   // ‡∏≠‡∏≤..‡∏™\n        configs: [{ sendAt: \"08:00\", rangeStart: \"17:00\", rangeEnd: \"08:00\" }]\n    }\n};\n\n// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å flow; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏±‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏•‡∏±‡∏ö\nlet settings = flow.get(\"notificationSettings\");\nif (!settings || !settings.schedule || !Array.isArray(settings.schedule.configs)) {\n    node.warn(\"Notification settings missing or invalid. Seeding defaults.\");\n    settings = DEFAULT_SETTINGS;\n    flow.set(\"notificationSettings\", settings);\n}\n\n// daysOfWeek ‡πÄ‡∏õ‡πá‡∏ô 0-6 (0=Sunday) ‡∏ï‡∏≤‡∏° cron\nconst weekdays = Array.isArray(settings.schedule.weekdays) ? settings.schedule.weekdays : [];\nconst daysOfWeekStr = weekdays\n    .map((isSelected, idx) => isSelected ? idx : -1)\n    .filter(idx => idx !== -1)\n    .join(',');\n\n// ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠\nconst removeAllMsg = { payload: { command: \"remove-all\" } };\n\n// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏ö\nif (!daysOfWeekStr || !Array.isArray(settings.schedule.configs) || settings.schedule.configs.length === 0) {\n    node.warn(\"No days or schedules selected. Removing all cron jobs.\");\n    return [[removeAllMsg], null];\n}\n\n// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞ config\nconst addMsgs = settings.schedule.configs\n    .filter(cfg => cfg && typeof cfg.sendAt === 'string' && cfg.sendAt.includes(':'))\n    .map((cfg, index) => {\n        const [hour, minute] = cfg.sendAt.split(':').map(s => String(s).trim());\n        const name = `digest-schedule-${index}`;\n        return {\n            payload: {\n                command: \"add\",\n                name,\n                // ‡πÉ‡∏ä‡πâ expressionType ‡πÅ‡∏ó‡∏ô type\n                expression: `${minute} ${hour} * * ${daysOfWeekStr}`,\n                expressionType: \"cron\",\n                // ‡∏™‡πà‡∏á config ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ï‡∏≠‡∏ô trigger\n                payload: cfg,\n                payloadType: \"json\"\n            }\n        };\n    });\n\n\n// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å: output1 = remove-all, output2 = ‡∏ä‡∏∏‡∏î add\nreturn [[removeAllMsg], addMsgs];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 1400,
        "wires": [
            [
                "246c8e40ce7babbb"
            ],
            [
                "246c8e40ce7babbb"
            ]
        ]
    },
    {
        "id": "e43561653a2a4834",
        "type": "comment",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Daily Report",
        "info": "",
        "x": 1770,
        "y": 1280,
        "wires": []
    },
    {
        "id": "2a78b5cd6ba1b8d3",
        "type": "subflow:c1a8b9f7.1d2e3f",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "",
        "x": 870,
        "y": 820,
        "wires": []
    },
    {
        "id": "4557dd1bb41b4158",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "c7e3510948f6624e",
        "name": "Adapt Sensor Status for Alert",
        "func": "// Function Node: Adapt Sensor Status for Alert\n// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å Sensor ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ Alert Engine ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß\n\nconst sensorStatuses = msg.payload; // msg.payload ‡πÄ‡∏õ‡πá‡∏ô Array [{mac, pin, status}, ...]\nif (!Array.isArray(sensorStatuses)) {\n    return null;\n}\n\nconst pinMap = global.get('mac_pin_names') || {};\n\n// ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sensor ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß\nsensorStatuses.forEach(sensor => {\n    const isOffline = (sensor.status.toUpperCase() === 'OFFLINE');\n    const alertValue = isOffline ? 0 : 1;\n\n    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Sensor (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\n    const devicePinMap = pinMap[sensor.mac] || {};\n    const sensorName = devicePinMap[`name_pin_${sensor.pin}`] || `Pin ${sensor.pin}`;\n\n    const newPayload = {\n        mac: sensor.mac,\n        sensor_name: sensorName, // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏≠‡∏á\n        metric: 'sensor_connectivity', // Metric ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Alert ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ\n        value: alertValue, // 0 = offline, 1 = online\n        ts: new Date().toISOString()\n    };\n\n    // ‡∏™‡πà‡∏á message ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sensor ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ\n    node.send({ payload: newPayload });\n});\n\n\n// ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á return ‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ node.send() ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 720,
        "wires": [
            [
                "bab874a3ec5e3d7f"
            ]
        ]
    },
    {
        "id": "246c8e40ce7babbb",
        "type": "cronplus",
        "z": "640c6734fdac3595",
        "g": "764e306119ec0e9d",
        "name": "Daily Digest Scheduler",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output2",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 2,
        "options": [],
        "x": 2260,
        "y": 1400,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9708f9c81584ae9a",
        "type": "uibuilder",
        "z": "640c6734fdac3595",
        "name": "",
        "topic": "",
        "url": "dashboard",
        "okToGo": true,
        "fwdInMessages": false,
        "allowScripts": true,
        "allowStyles": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "7.4.3",
        "showMsgUib": false,
        "title": "",
        "descr": "",
        "editurl": "vscode://file\\Users\\PCSGH\\.node-red\\uibuilder/dashboard/?windowId=_blank",
        "x": 1330,
        "y": 680,
        "wires": [
            [
                "c46318095bd096a9",
                "b8274aa11208401e"
            ],
            []
        ]
    },
    {
        "id": "57fe4cea096dc9a9",
        "type": "function",
        "z": "640c6734fdac3595",
        "g": "37e675817144b486",
        "name": "2. Prepare Alert Query",
        "func": "msg.results = {\n    sensors: msg.payload\n};\n\nconst { from, to, macs } = msg.reportInfo.params;\n\n// ‚ú® FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ Local ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Database ‚ú®\nfunction toSqlLocal(isoString) {\n    if (!isoString) return null;\n    try {\n        const d = new Date(isoString);\n        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Offset ‡∏Ç‡∏≠‡∏á Timezone ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤ Local ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n        const tzOffset = d.getTimezoneOffset() * 60000;\n        const localTime = new Date(d.getTime() - tzOffset);\n        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï 'YYYY-MM-DD HH:MM:SS' ‡∏ó‡∏µ‡πà Database ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à\n        return localTime.toISOString().slice(0, 19).replace('T', ' ');\n    } catch (e) {\n        return isoString; // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°\n    }\n}\n\n// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å UI ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Local Time ‡∏Ç‡∏≠‡∏á Database\nconst fromSql = toSqlLocal(from);\nconst toSql = toSqlLocal(to);\n\n\n// ‚ú® SQL Query ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° Logic ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Metric ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚ú®\nconst alertSql = `\nSELECT\n    opened_at AS alert_time,\n    mac,\n    room_name,\n    sensor_name,\n    metric AS metric_raw,\n    -- 'metric' ‡∏Ç‡∏≠‡∏á sensor offline ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô 'sensor_connectivity' ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß\n    -- ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ CASE statement ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ\n    metric,\n    level,\n    trigger_value,\n    status,\n    ack_by AS acknowledged_by,\n    ack_at AS acknowledged_time,\n    closed_at AS closed_time\nFROM alert_events\nWHERE\n    mac IN (${macs.map(() => '?').join(',')})\n    AND opened_at <= ?\n    AND (closed_at IS NULL OR closed_at >= ?)\nORDER BY opened_at ASC;`;\n\n// ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß (toSql, fromSql) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Query\nconst alertParams = [...macs, toSql, fromSql];\n\nmsg.topic = alertSql;\nmsg.payload = alertParams;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 1320,
        "wires": [
            [
                "417fa61902dccc67"
            ]
        ]
    },
    {
        "id": "8301192ec347dbc9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.42.9",
        "port": "18831",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5e560f07cfec117a",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.42.9",
        "port": "33061",
        "db": "Server Monitoring Environment",
        "tz": "",
        "charset": "UTF8"
    }
]
